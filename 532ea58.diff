From 532ea585030afa25c0233ca637ff5cdbfa372426 Mon Sep 17 00:00:00 2001
From: Daniel Mart√≠ <mvdan@mvdan.cc>
Date: Mon, 23 Sep 2019 23:10:25 +0100
Subject: [PATCH] cmd/compile: minor simplifications in rulegen

First, get rid of redundant parentheses in the generated code. This
trims only about 2300 bytes, but the code is a bit nicer to read.

Second, be consistent about declaring typ as &b.Func.Config.Types and
not &config.Types. Not particularly better, and it barely changes the
output, but we're more consistent now.

Third, remove a bit of duplication when handling the typ, auxint, and
aux variables.

Fourth and last, remove a stray canFail assignment; we ended up setting
that in add, not breakf, so it's not necessary to set it manually if we
don't use breakf.

Updates #33644.

Change-Id: I75999cb223a201969266fbfeae043599fa27fac5
---

diff --git a/src/cmd/compile/internal/ssa/gen/rulegen.go b/src/cmd/compile/internal/ssa/gen/rulegen.go
index 994e5b9..983aa2d 100644
--- a/src/cmd/compile/internal/ssa/gen/rulegen.go
+++ b/src/cmd/compile/internal/ssa/gen/rulegen.go
@@ -237,7 +237,7 @@
 	// so we can make this one function with a switch.
 	fn = &Func{kind: "Block"}
 	fn.add(declf("config", "b.Func.Config"))
-	fn.add(declf("typ", "&config.Types"))
+	fn.add(declf("typ", "&b.Func.Config.Types"))
 	fn.add(declf("v", "b.Control"))
 
 	sw = &Switch{expr: exprf("b.Kind")}
@@ -285,6 +285,18 @@
 			tfile.MergeLine(tfile.Position(node.Pos()).Line)
 			return false
 		}
+		switch node := c.Node().(type) {
+		case *ast.ParenExpr:
+			if _, ok := node.X.(*ast.BinaryExpr); ok {
+				// e.g. don't replace "(a + b) * c" with "a + b * c"
+				break
+			}
+			if _, ok := c.Parent().(*ast.SelectorExpr); ok {
+				// e.g. don't replace "(*a).b" with "*a.b"
+				break
+			}
+			c.Replace(node.X)
+		}
 		return true
 	}
 	post := func(c *astutil.Cursor) bool {
@@ -851,28 +863,21 @@
 		pos = v + ".Pos"
 	}
 
-	if typ != "" {
-		if !token.IsIdentifier(typ) || rr.declared(typ) {
-			// code or variable
-			rr.add(breakf("%s.Type != %s", v, typ))
-		} else {
-			rr.add(declf(typ, "%s.Type", v))
+	for _, e := range []struct {
+		name, field string
+	}{
+		{typ, "Type"},
+		{auxint, "AuxInt"},
+		{aux, "Aux"},
+	} {
+		if e.name == "" {
+			continue
 		}
-	}
-	if auxint != "" {
-		if !token.IsIdentifier(auxint) || rr.declared(auxint) {
+		if !token.IsIdentifier(e.name) || rr.declared(e.name) {
 			// code or variable
-			rr.add(breakf("%s.AuxInt != %s", v, auxint))
+			rr.add(breakf("%s.%s != %s", v, e.field, e.name))
 		} else {
-			rr.add(declf(auxint, "%s.AuxInt", v))
-		}
-	}
-	if aux != "" {
-		if !token.IsIdentifier(aux) || rr.declared(aux) {
-			// code or variable
-			rr.add(breakf("%s.Aux != %s", v, aux))
-		} else {
-			rr.add(declf(aux, "%s.Aux", v))
+			rr.add(declf(e.name, "%s.%s", v, e.field))
 		}
 	}
 
@@ -921,7 +926,6 @@
 		rr.add(declf(argname, "%s.Args[%d]", v, i))
 		bexpr := exprf("%s.Op != addLater", argname)
 		rr.add(&CondBreak{expr: bexpr})
-		rr.canFail = true // since we're not using breakf
 		argPos, argCheckOp := genMatch0(rr, arch, arg, argname)
 		bexpr.(*ast.BinaryExpr).Y.(*ast.Ident).Name = argCheckOp
 
diff --git a/src/cmd/compile/internal/ssa/rewrite386.go b/src/cmd/compile/internal/ssa/rewrite386.go
index 08139d6..759c0e0 100644
--- a/src/cmd/compile/internal/ssa/rewrite386.go
+++ b/src/cmd/compile/internal/ssa/rewrite386.go
@@ -1424,7 +1424,7 @@
 		d := v_0.AuxInt
 		s := v_0.Aux
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(Op386LEAL)
@@ -1446,7 +1446,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(Op386LEAL1)
@@ -1469,7 +1469,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(Op386LEAL2)
@@ -1492,7 +1492,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(Op386LEAL4)
@@ -1515,7 +1515,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(Op386LEAL8)
@@ -1585,7 +1585,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(Op386ADDLconstmodify)
@@ -1638,7 +1638,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(Op386ADDLconstmodifyidx4)
@@ -1663,7 +1663,7 @@
 		}
 		off2 := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2 * 4)) {
+		if !ValAndOff(valoff1).canAdd(off2 * 4) {
 			break
 		}
 		v.reset(Op386ADDLconstmodifyidx4)
@@ -1719,7 +1719,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ADDLload)
@@ -1804,7 +1804,7 @@
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
 		idx := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ADDLloadidx4)
@@ -1831,7 +1831,7 @@
 		}
 		off2 := v_2.AuxInt
 		idx := v_2.Args[0]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386ADDLloadidx4)
@@ -1890,7 +1890,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ADDLmodify)
@@ -1947,7 +1947,7 @@
 		base := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ADDLmodifyidx4)
@@ -1974,7 +1974,7 @@
 		off2 := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386ADDLmodifyidx4)
@@ -2028,7 +2028,7 @@
 			break
 		}
 		c := v_2.AuxInt
-		if !(validValAndOff(c, off)) {
+		if !validValAndOff(c, off) {
 			break
 		}
 		v.reset(Op386ADDLconstmodifyidx4)
@@ -2112,7 +2112,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ADDSDload)
@@ -2222,7 +2222,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ADDSSload)
@@ -2480,7 +2480,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(Op386ANDLconstmodify)
@@ -2533,7 +2533,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(Op386ANDLconstmodifyidx4)
@@ -2558,7 +2558,7 @@
 		}
 		off2 := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2 * 4)) {
+		if !ValAndOff(valoff1).canAdd(off2 * 4) {
 			break
 		}
 		v.reset(Op386ANDLconstmodifyidx4)
@@ -2614,7 +2614,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ANDLload)
@@ -2699,7 +2699,7 @@
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
 		idx := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ANDLloadidx4)
@@ -2726,7 +2726,7 @@
 		}
 		off2 := v_2.AuxInt
 		idx := v_2.Args[0]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386ANDLloadidx4)
@@ -2785,7 +2785,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ANDLmodify)
@@ -2842,7 +2842,7 @@
 		base := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ANDLmodifyidx4)
@@ -2869,7 +2869,7 @@
 		off2 := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386ANDLmodifyidx4)
@@ -2923,7 +2923,7 @@
 			break
 		}
 		c := v_2.AuxInt
-		if !(validValAndOff(c, off)) {
+		if !validValAndOff(c, off) {
 			break
 		}
 		v.reset(Op386ANDLconstmodifyidx4)
@@ -3216,7 +3216,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validValAndOff(int64(int8(c)), off)) {
+		if !validValAndOff(int64(int8(c)), off) {
 			break
 		}
 		v.reset(Op386CMPBconstload)
@@ -3527,7 +3527,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validValAndOff(int64(int32(c)), off)) {
+		if !validValAndOff(int64(int32(c)), off) {
 			break
 		}
 		v.reset(Op386CMPLconstload)
@@ -3819,7 +3819,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validValAndOff(int64(int16(c)), off)) {
+		if !validValAndOff(int64(int16(c)), off) {
 			break
 		}
 		v.reset(Op386CMPWconstload)
@@ -3878,7 +3878,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386DIVSDload)
@@ -3964,7 +3964,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386DIVSSload)
@@ -4016,7 +4016,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(Op386LEAL)
@@ -4866,7 +4866,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVBload)
@@ -4958,7 +4958,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(Op386MOVLconst)
@@ -5111,7 +5111,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVBstore)
@@ -5135,7 +5135,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validOff(off)) {
+		if !validOff(off) {
 			break
 		}
 		v.reset(Op386MOVBstoreconst)
@@ -5396,7 +5396,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(Op386MOVBstoreconst)
@@ -5445,7 +5445,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(Op386MOVBstoreconstidx1)
@@ -6388,7 +6388,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVLload)
@@ -6506,7 +6506,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(Op386MOVLconst)
@@ -6704,7 +6704,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVLstore)
@@ -6728,7 +6728,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validOff(off)) {
+		if !validOff(off) {
 			break
 		}
 		v.reset(Op386MOVLstoreconst)
@@ -7347,7 +7347,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(Op386MOVLstoreconst)
@@ -7396,7 +7396,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(Op386MOVLstoreconstidx1)
@@ -7422,7 +7422,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(Op386MOVLstoreconstidx4)
@@ -8276,7 +8276,7 @@
 	// result: (MOVSDconst2 (MOVSDconst1 [c]))
 	for {
 		c := v.AuxInt
-		if !(config.ctxt.Flag_shared) {
+		if !config.ctxt.Flag_shared {
 			break
 		}
 		v.reset(Op386MOVSDconst2)
@@ -8303,7 +8303,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVSDload)
@@ -8522,7 +8522,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVSDstore)
@@ -8750,7 +8750,7 @@
 	// result: (MOVSSconst2 (MOVSSconst1 [c]))
 	for {
 		c := v.AuxInt
-		if !(config.ctxt.Flag_shared) {
+		if !config.ctxt.Flag_shared {
 			break
 		}
 		v.reset(Op386MOVSSconst2)
@@ -8777,7 +8777,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVSSload)
@@ -8996,7 +8996,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVSSstore)
@@ -9452,7 +9452,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVWload)
@@ -9570,7 +9570,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(Op386MOVLconst)
@@ -9808,7 +9808,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MOVWstore)
@@ -9832,7 +9832,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validOff(off)) {
+		if !validOff(off) {
 			break
 		}
 		v.reset(Op386MOVWstoreconst)
@@ -10031,7 +10031,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(Op386MOVWstoreconst)
@@ -10080,7 +10080,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(Op386MOVWstoreconstidx1)
@@ -10106,7 +10106,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(Op386MOVWstoreconstidx2)
@@ -11528,7 +11528,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MULLload)
@@ -11613,7 +11613,7 @@
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
 		idx := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MULLloadidx4)
@@ -11640,7 +11640,7 @@
 		}
 		off2 := v_2.AuxInt
 		idx := v_2.Args[0]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386MULLloadidx4)
@@ -11753,7 +11753,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MULSDload)
@@ -11863,7 +11863,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386MULSSload)
@@ -14935,7 +14935,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(Op386ORLconstmodify)
@@ -14988,7 +14988,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(Op386ORLconstmodifyidx4)
@@ -15013,7 +15013,7 @@
 		}
 		off2 := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2 * 4)) {
+		if !ValAndOff(valoff1).canAdd(off2 * 4) {
 			break
 		}
 		v.reset(Op386ORLconstmodifyidx4)
@@ -15069,7 +15069,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ORLload)
@@ -15154,7 +15154,7 @@
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
 		idx := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ORLloadidx4)
@@ -15181,7 +15181,7 @@
 		}
 		off2 := v_2.AuxInt
 		idx := v_2.Args[0]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386ORLloadidx4)
@@ -15240,7 +15240,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ORLmodify)
@@ -15297,7 +15297,7 @@
 		base := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386ORLmodifyidx4)
@@ -15324,7 +15324,7 @@
 		off2 := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386ORLmodifyidx4)
@@ -15378,7 +15378,7 @@
 			break
 		}
 		c := v_2.AuxInt
-		if !(validValAndOff(c, off)) {
+		if !validValAndOff(c, off) {
 			break
 		}
 		v.reset(Op386ORLconstmodifyidx4)
@@ -16774,7 +16774,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386SUBLload)
@@ -16859,7 +16859,7 @@
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
 		idx := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386SUBLloadidx4)
@@ -16886,7 +16886,7 @@
 		}
 		off2 := v_2.AuxInt
 		idx := v_2.Args[0]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386SUBLloadidx4)
@@ -16945,7 +16945,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386SUBLmodify)
@@ -17002,7 +17002,7 @@
 		base := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386SUBLmodifyidx4)
@@ -17029,7 +17029,7 @@
 		off2 := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386SUBLmodifyidx4)
@@ -17083,7 +17083,7 @@
 			break
 		}
 		c := v_2.AuxInt
-		if !(validValAndOff(-c, off)) {
+		if !validValAndOff(-c, off) {
 			break
 		}
 		v.reset(Op386ADDLconstmodifyidx4)
@@ -17143,7 +17143,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386SUBSDload)
@@ -17229,7 +17229,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386SUBSSload)
@@ -17625,7 +17625,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(Op386XORLconstmodify)
@@ -17678,7 +17678,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(Op386XORLconstmodifyidx4)
@@ -17703,7 +17703,7 @@
 		}
 		off2 := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2 * 4)) {
+		if !ValAndOff(valoff1).canAdd(off2 * 4) {
 			break
 		}
 		v.reset(Op386XORLconstmodifyidx4)
@@ -17759,7 +17759,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386XORLload)
@@ -17844,7 +17844,7 @@
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
 		idx := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386XORLloadidx4)
@@ -17871,7 +17871,7 @@
 		}
 		off2 := v_2.AuxInt
 		idx := v_2.Args[0]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386XORLloadidx4)
@@ -17930,7 +17930,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386XORLmodify)
@@ -17987,7 +17987,7 @@
 		base := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(Op386XORLmodifyidx4)
@@ -18014,7 +18014,7 @@
 		off2 := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(off1 + off2*4)) {
+		if !is32Bit(off1 + off2*4) {
 			break
 		}
 		v.reset(Op386XORLmodifyidx4)
@@ -18068,7 +18068,7 @@
 			break
 		}
 		c := v_2.AuxInt
-		if !(validValAndOff(c, off)) {
+		if !validValAndOff(c, off) {
 			break
 		}
 		v.reset(Op386XORLconstmodifyidx4)
@@ -19297,7 +19297,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(Op386MOVWload)
@@ -19327,7 +19327,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is32BitFloat(t)) {
+		if !is32BitFloat(t) {
 			break
 		}
 		v.reset(Op386MOVSSload)
@@ -19342,7 +19342,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is64BitFloat(t)) {
+		if !is64BitFloat(t) {
 			break
 		}
 		v.reset(Op386MOVSDload)
@@ -20150,7 +20150,7 @@
 	// result: (PXOR x (MOVSSconst <typ.Float32> [auxFrom32F(float32(math.Copysign(0, -1)))]))
 	for {
 		x := v.Args[0]
-		if !(!config.use387) {
+		if !!config.use387 {
 			break
 		}
 		v.reset(Op386PXOR)
@@ -20165,7 +20165,7 @@
 	// result: (FCHS x)
 	for {
 		x := v.Args[0]
-		if !(config.use387) {
+		if !config.use387 {
 			break
 		}
 		v.reset(Op386FCHS)
@@ -20183,7 +20183,7 @@
 	// result: (PXOR x (MOVSDconst <typ.Float64> [auxFrom64F(math.Copysign(0, -1))]))
 	for {
 		x := v.Args[0]
-		if !(!config.use387) {
+		if !!config.use387 {
 			break
 		}
 		v.reset(Op386PXOR)
@@ -20198,7 +20198,7 @@
 	// result: (FCHS x)
 	for {
 		x := v.Args[0]
-		if !(config.use387) {
+		if !config.use387 {
 			break
 		}
 		v.reset(Op386FCHS)
diff --git a/src/cmd/compile/internal/ssa/rewriteAMD64.go b/src/cmd/compile/internal/ssa/rewriteAMD64.go
index 055ab73..12642a1 100644
--- a/src/cmd/compile/internal/ssa/rewriteAMD64.go
+++ b/src/cmd/compile/internal/ssa/rewriteAMD64.go
@@ -1169,7 +1169,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ADCQconst)
@@ -1189,7 +1189,7 @@
 		}
 		c := v_0.AuxInt
 		x := v.Args[1]
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ADCQconst)
@@ -1813,7 +1813,7 @@
 		d := v_0.AuxInt
 		s := v_0.Aux
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAL)
@@ -1835,7 +1835,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAL1)
@@ -1858,7 +1858,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAL2)
@@ -1881,7 +1881,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAL4)
@@ -1904,7 +1904,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAL8)
@@ -1988,7 +1988,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64ADDLconstmodify)
@@ -2041,7 +2041,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ADDLload)
@@ -2119,7 +2119,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ADDLmodify)
@@ -2170,7 +2170,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ADDQconst)
@@ -2188,7 +2188,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ADDQconst)
@@ -2614,7 +2614,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ADDQconstcarry)
@@ -2632,7 +2632,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ADDQconstcarry)
@@ -2686,7 +2686,7 @@
 		d := v_0.AuxInt
 		s := v_0.Aux
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAQ)
@@ -2708,7 +2708,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAQ1)
@@ -2731,7 +2731,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAQ2)
@@ -2754,7 +2754,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAQ4)
@@ -2777,7 +2777,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAQ8)
@@ -2823,7 +2823,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64ADDQconst)
@@ -2863,7 +2863,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64ADDQconstmodify)
@@ -2916,7 +2916,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ADDQload)
@@ -2994,7 +2994,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ADDQmodify)
@@ -3102,7 +3102,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ADDSDload)
@@ -3234,7 +3234,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ADDSSload)
@@ -3315,7 +3315,7 @@
 		}
 		y := v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
-		if v_0_0_0.Op != OpAMD64MOVLconst || v_0_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0_0.Op != OpAMD64MOVLconst || v_0_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTRL)
@@ -3339,7 +3339,7 @@
 		}
 		y := v_1_0.Args[1]
 		v_1_0_0 := v_1_0.Args[0]
-		if v_1_0_0.Op != OpAMD64MOVLconst || v_1_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0_0.Op != OpAMD64MOVLconst || v_1_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTRL)
@@ -3600,7 +3600,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64ANDLconstmodify)
@@ -3653,7 +3653,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ANDLload)
@@ -3731,7 +3731,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ANDLmodify)
@@ -3788,7 +3788,7 @@
 		}
 		y := v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
-		if v_0_0_0.Op != OpAMD64MOVQconst || v_0_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0_0.Op != OpAMD64MOVQconst || v_0_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTRQ)
@@ -3812,7 +3812,7 @@
 		}
 		y := v_1_0.Args[1]
 		v_1_0_0 := v_1_0.Args[0]
-		if v_1_0_0.Op != OpAMD64MOVQconst || v_1_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0_0.Op != OpAMD64MOVQconst || v_1_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTRQ)
@@ -3868,7 +3868,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ANDQconst)
@@ -3886,7 +3886,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ANDQconst)
@@ -4088,7 +4088,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64ANDQconstmodify)
@@ -4141,7 +4141,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ANDQload)
@@ -4219,7 +4219,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ANDQmodify)
@@ -4368,7 +4368,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64BTCLconstmodify)
@@ -4419,7 +4419,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64BTCLmodify)
@@ -4518,7 +4518,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64BTCQconstmodify)
@@ -4569,7 +4569,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64BTCQmodify)
@@ -4867,7 +4867,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64BTRLconstmodify)
@@ -4918,7 +4918,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64BTRLmodify)
@@ -5045,7 +5045,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64BTRQconstmodify)
@@ -5096,7 +5096,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64BTRQmodify)
@@ -5223,7 +5223,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64BTSLconstmodify)
@@ -5274,7 +5274,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64BTSLmodify)
@@ -5401,7 +5401,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64BTSQconstmodify)
@@ -5452,7 +5452,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64BTSQmodify)
@@ -8490,7 +8490,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64CMPBconstload)
@@ -8541,7 +8541,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64CMPBload)
@@ -8591,7 +8591,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validValAndOff(int64(int8(c)), off)) {
+		if !validValAndOff(int64(int8(c)), off) {
 			break
 		}
 		v.reset(OpAMD64CMPBconstload)
@@ -8894,7 +8894,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64CMPLconstload)
@@ -8945,7 +8945,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64CMPLload)
@@ -8995,7 +8995,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validValAndOff(c, off)) {
+		if !validValAndOff(c, off) {
 			break
 		}
 		v.reset(OpAMD64CMPLconstload)
@@ -9020,7 +9020,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64CMPQconst)
@@ -9038,7 +9038,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64InvertFlags)
@@ -9400,7 +9400,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64CMPQconstload)
@@ -9451,7 +9451,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64CMPQload)
@@ -9501,7 +9501,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validValAndOff(c, off)) {
+		if !validValAndOff(c, off) {
 			break
 		}
 		v.reset(OpAMD64CMPQconstload)
@@ -9785,7 +9785,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64CMPWconstload)
@@ -9836,7 +9836,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64CMPWload)
@@ -9886,7 +9886,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validValAndOff(int64(int16(c)), off)) {
+		if !validValAndOff(int64(int16(c)), off) {
 			break
 		}
 		v.reset(OpAMD64CMPWconstload)
@@ -9914,7 +9914,7 @@
 		ptr := v_0.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64CMPXCHGLlock)
@@ -9944,7 +9944,7 @@
 		ptr := v_0.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64CMPXCHGQlock)
@@ -10001,7 +10001,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64DIVSDload)
@@ -10083,7 +10083,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64DIVSSload)
@@ -10203,7 +10203,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAL)
@@ -10617,7 +10617,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64LEAQ)
@@ -11549,7 +11549,7 @@
 	// result: x
 	for {
 		x := v.Args[0]
-		if !(zeroUpper56Bits(x, 3)) {
+		if !zeroUpper56Bits(x, 3) {
 			break
 		}
 		v.reset(OpCopy)
@@ -11626,7 +11626,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVBatomicload)
@@ -11700,7 +11700,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVBload)
@@ -11821,7 +11821,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVBload)
@@ -11839,7 +11839,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpAMD64MOVLconst)
@@ -11863,7 +11863,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVBloadidx1)
@@ -11888,7 +11888,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVBloadidx1)
@@ -11913,7 +11913,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVBloadidx1)
@@ -11938,7 +11938,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVBloadidx1)
@@ -11962,7 +11962,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVBload)
@@ -11985,7 +11985,7 @@
 		}
 		c := v_0.AuxInt
 		p := v.Args[1]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVBload)
@@ -12296,7 +12296,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVBstore)
@@ -12320,7 +12320,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validOff(off)) {
+		if !validOff(off) {
 			break
 		}
 		v.reset(OpAMD64MOVBstoreconst)
@@ -12343,7 +12343,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validOff(off)) {
+		if !validOff(off) {
 			break
 		}
 		v.reset(OpAMD64MOVBstoreconst)
@@ -12958,7 +12958,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVBstore)
@@ -12985,7 +12985,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(OpAMD64MOVBstoreconst)
@@ -13034,7 +13034,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpAMD64MOVBstoreconstidx1)
@@ -13156,7 +13156,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(OpAMD64MOVBstoreconst)
@@ -13183,7 +13183,7 @@
 		c := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVBstoreconstidx1)
@@ -13208,7 +13208,7 @@
 		}
 		c := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVBstoreconstidx1)
@@ -13267,7 +13267,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVBstoreidx1)
@@ -13294,7 +13294,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVBstoreidx1)
@@ -13684,7 +13684,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVBstore)
@@ -13913,7 +13913,7 @@
 	// result: x
 	for {
 		x := v.Args[0]
-		if !(zeroUpper32Bits(x, 3)) {
+		if !zeroUpper32Bits(x, 3) {
 			break
 		}
 		v.reset(OpCopy)
@@ -14041,7 +14041,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVLatomicload)
@@ -14169,7 +14169,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVLload)
@@ -14342,7 +14342,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVLload)
@@ -14385,7 +14385,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpAMD64MOVQconst)
@@ -14489,7 +14489,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLloadidx1)
@@ -14514,7 +14514,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLloadidx1)
@@ -14539,7 +14539,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLloadidx1)
@@ -14564,7 +14564,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLloadidx1)
@@ -14588,7 +14588,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVLload)
@@ -14611,7 +14611,7 @@
 		}
 		c := v_0.AuxInt
 		p := v.Args[1]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVLload)
@@ -14638,7 +14638,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLloadidx4)
@@ -14663,7 +14663,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + 4*d)) {
+		if !is32Bit(c + 4*d) {
 			break
 		}
 		v.reset(OpAMD64MOVLloadidx4)
@@ -14687,7 +14687,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + 4*c)) {
+		if !is32Bit(i + 4*c) {
 			break
 		}
 		v.reset(OpAMD64MOVLload)
@@ -14714,7 +14714,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLloadidx8)
@@ -14739,7 +14739,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + 8*d)) {
+		if !is32Bit(c + 8*d) {
 			break
 		}
 		v.reset(OpAMD64MOVLloadidx8)
@@ -14763,7 +14763,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + 8*c)) {
+		if !is32Bit(i + 8*c) {
 			break
 		}
 		v.reset(OpAMD64MOVLload)
@@ -14830,7 +14830,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVLstore)
@@ -14854,7 +14854,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validOff(off)) {
+		if !validOff(off) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconst)
@@ -14877,7 +14877,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validOff(off)) {
+		if !validOff(off) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconst)
@@ -15176,7 +15176,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVLstore)
@@ -15886,7 +15886,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconst)
@@ -15935,7 +15935,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconstidx1)
@@ -15961,7 +15961,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconstidx4)
@@ -16089,7 +16089,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconst)
@@ -16138,7 +16138,7 @@
 		c := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconstidx1)
@@ -16163,7 +16163,7 @@
 		}
 		c := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconstidx1)
@@ -16225,7 +16225,7 @@
 		c := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconstidx4)
@@ -16250,7 +16250,7 @@
 		}
 		c := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(x).canAdd(4 * c)) {
+		if !ValAndOff(x).canAdd(4 * c) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreconstidx4)
@@ -16358,7 +16358,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreidx1)
@@ -16385,7 +16385,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreidx1)
@@ -16478,7 +16478,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVLstore)
@@ -16508,7 +16508,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreidx4)
@@ -16535,7 +16535,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + 4*d)) {
+		if !is32Bit(c + 4*d) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreidx4)
@@ -16634,7 +16634,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + 4*c)) {
+		if !is32Bit(i + 4*c) {
 			break
 		}
 		v.reset(OpAMD64MOVLstore)
@@ -16663,7 +16663,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreidx8)
@@ -16690,7 +16690,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + 8*d)) {
+		if !is32Bit(c + 8*d) {
 			break
 		}
 		v.reset(OpAMD64MOVLstoreidx8)
@@ -16716,7 +16716,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + 8*c)) {
+		if !is32Bit(i + 8*c) {
 			break
 		}
 		v.reset(OpAMD64MOVLstore)
@@ -16743,7 +16743,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVOload)
@@ -16794,7 +16794,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVOstore)
@@ -16847,7 +16847,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVQatomicload)
@@ -16978,7 +16978,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVQload)
@@ -17125,7 +17125,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVQload)
@@ -17163,7 +17163,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpAMD64MOVQconst)
@@ -17227,7 +17227,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVQloadidx1)
@@ -17252,7 +17252,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVQloadidx1)
@@ -17277,7 +17277,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVQloadidx1)
@@ -17302,7 +17302,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVQloadidx1)
@@ -17326,7 +17326,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVQload)
@@ -17349,7 +17349,7 @@
 		}
 		c := v_0.AuxInt
 		p := v.Args[1]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVQload)
@@ -17376,7 +17376,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVQloadidx8)
@@ -17401,7 +17401,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + 8*d)) {
+		if !is32Bit(c + 8*d) {
 			break
 		}
 		v.reset(OpAMD64MOVQloadidx8)
@@ -17425,7 +17425,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + 8*c)) {
+		if !is32Bit(i + 8*c) {
 			break
 		}
 		v.reset(OpAMD64MOVQload)
@@ -17452,7 +17452,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVQstore)
@@ -17476,7 +17476,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validValAndOff(c, off)) {
+		if !validValAndOff(c, off) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconst)
@@ -17634,7 +17634,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVQstore)
@@ -18347,7 +18347,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconst)
@@ -18396,7 +18396,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconstidx1)
@@ -18422,7 +18422,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconstidx8)
@@ -18520,7 +18520,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconst)
@@ -18567,7 +18567,7 @@
 		c := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconstidx1)
@@ -18592,7 +18592,7 @@
 		}
 		c := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconstidx1)
@@ -18620,7 +18620,7 @@
 		c := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconstidx8)
@@ -18645,7 +18645,7 @@
 		}
 		c := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(x).canAdd(8 * c)) {
+		if !ValAndOff(x).canAdd(8 * c) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconstidx8)
@@ -18696,7 +18696,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreidx1)
@@ -18723,7 +18723,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreidx1)
@@ -18749,7 +18749,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVQstore)
@@ -18778,7 +18778,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreidx8)
@@ -18805,7 +18805,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + 8*d)) {
+		if !is32Bit(c + 8*d) {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreidx8)
@@ -18831,7 +18831,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + 8*c)) {
+		if !is32Bit(i + 8*c) {
 			break
 		}
 		v.reset(OpAMD64MOVQstore)
@@ -18858,7 +18858,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVSDload)
@@ -19025,7 +19025,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSDloadidx1)
@@ -19050,7 +19050,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSDloadidx1)
@@ -19074,7 +19074,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVSDload)
@@ -19101,7 +19101,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSDloadidx8)
@@ -19126,7 +19126,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + 8*d)) {
+		if !is32Bit(c + 8*d) {
 			break
 		}
 		v.reset(OpAMD64MOVSDloadidx8)
@@ -19150,7 +19150,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + 8*c)) {
+		if !is32Bit(i + 8*c) {
 			break
 		}
 		v.reset(OpAMD64MOVSDload)
@@ -19177,7 +19177,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVSDstore)
@@ -19356,7 +19356,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSDstoreidx1)
@@ -19383,7 +19383,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSDstoreidx1)
@@ -19409,7 +19409,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVSDstore)
@@ -19438,7 +19438,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSDstoreidx8)
@@ -19465,7 +19465,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + 8*d)) {
+		if !is32Bit(c + 8*d) {
 			break
 		}
 		v.reset(OpAMD64MOVSDstoreidx8)
@@ -19491,7 +19491,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + 8*c)) {
+		if !is32Bit(i + 8*c) {
 			break
 		}
 		v.reset(OpAMD64MOVSDstore)
@@ -19518,7 +19518,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVSSload)
@@ -19685,7 +19685,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSSloadidx1)
@@ -19710,7 +19710,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSSloadidx1)
@@ -19734,7 +19734,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVSSload)
@@ -19761,7 +19761,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSSloadidx4)
@@ -19786,7 +19786,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + 4*d)) {
+		if !is32Bit(c + 4*d) {
 			break
 		}
 		v.reset(OpAMD64MOVSSloadidx4)
@@ -19810,7 +19810,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + 4*c)) {
+		if !is32Bit(i + 4*c) {
 			break
 		}
 		v.reset(OpAMD64MOVSSload)
@@ -19837,7 +19837,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVSSstore)
@@ -20016,7 +20016,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSSstoreidx1)
@@ -20043,7 +20043,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSSstoreidx1)
@@ -20069,7 +20069,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVSSstore)
@@ -20098,7 +20098,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVSSstoreidx4)
@@ -20125,7 +20125,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + 4*d)) {
+		if !is32Bit(c + 4*d) {
 			break
 		}
 		v.reset(OpAMD64MOVSSstoreidx4)
@@ -20151,7 +20151,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + 4*c)) {
+		if !is32Bit(i + 4*c) {
 			break
 		}
 		v.reset(OpAMD64MOVSSstore)
@@ -20418,7 +20418,7 @@
 	// result: x
 	for {
 		x := v.Args[0]
-		if !(zeroUpper48Bits(x, 3)) {
+		if !zeroUpper48Bits(x, 3) {
 			break
 		}
 		v.reset(OpCopy)
@@ -20560,7 +20560,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVWload)
@@ -20707,7 +20707,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVWload)
@@ -20725,7 +20725,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpAMD64MOVLconst)
@@ -20789,7 +20789,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVWloadidx1)
@@ -20814,7 +20814,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVWloadidx1)
@@ -20839,7 +20839,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVWloadidx1)
@@ -20864,7 +20864,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVWloadidx1)
@@ -20888,7 +20888,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVWload)
@@ -20911,7 +20911,7 @@
 		}
 		c := v_0.AuxInt
 		p := v.Args[1]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVWload)
@@ -20938,7 +20938,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVWloadidx2)
@@ -20963,7 +20963,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is32Bit(c + 2*d)) {
+		if !is32Bit(c + 2*d) {
 			break
 		}
 		v.reset(OpAMD64MOVWloadidx2)
@@ -20987,7 +20987,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(i + 2*c)) {
+		if !is32Bit(i + 2*c) {
 			break
 		}
 		v.reset(OpAMD64MOVWload)
@@ -21054,7 +21054,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVWstore)
@@ -21078,7 +21078,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validOff(off)) {
+		if !validOff(off) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconst)
@@ -21101,7 +21101,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(validOff(off)) {
+		if !validOff(off) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconst)
@@ -21435,7 +21435,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MOVWstore)
@@ -21462,7 +21462,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconst)
@@ -21511,7 +21511,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconstidx1)
@@ -21537,7 +21537,7 @@
 		sym2 := v_0.Aux
 		idx := v_0.Args[1]
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconstidx2)
@@ -21659,7 +21659,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(ValAndOff(sc).canAdd(off)) {
+		if !ValAndOff(sc).canAdd(off) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconst)
@@ -21706,7 +21706,7 @@
 		c := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconstidx1)
@@ -21731,7 +21731,7 @@
 		}
 		c := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconstidx1)
@@ -21789,7 +21789,7 @@
 		c := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(ValAndOff(x).canAdd(c)) {
+		if !ValAndOff(x).canAdd(c) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconstidx2)
@@ -21814,7 +21814,7 @@
 		}
 		c := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(ValAndOff(x).canAdd(2 * c)) {
+		if !ValAndOff(x).canAdd(2 * c) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreconstidx2)
@@ -21897,7 +21897,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreidx1)
@@ -21924,7 +21924,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreidx1)
@@ -22084,7 +22084,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + c)) {
+		if !is32Bit(i + c) {
 			break
 		}
 		v.reset(OpAMD64MOVWstore)
@@ -22114,7 +22114,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreidx2)
@@ -22141,7 +22141,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is32Bit(c + 2*d)) {
+		if !is32Bit(c + 2*d) {
 			break
 		}
 		v.reset(OpAMD64MOVWstoreidx2)
@@ -22274,7 +22274,7 @@
 		}
 		c := v_1.AuxInt
 		w := v.Args[2]
-		if !(is32Bit(i + 2*c)) {
+		if !is32Bit(i + 2*c) {
 			break
 		}
 		v.reset(OpAMD64MOVWstore)
@@ -22810,7 +22810,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64MULQconst)
@@ -22828,7 +22828,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64MULQconst)
@@ -22851,7 +22851,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c * d)) {
+		if !is32Bit(c * d) {
 			break
 		}
 		v.reset(OpAMD64MULQconst)
@@ -23408,7 +23408,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MULSDload)
@@ -23540,7 +23540,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64MULSSload)
@@ -23761,7 +23761,7 @@
 		}
 		y := v_0.Args[1]
 		v_0_0 := v_0.Args[0]
-		if v_0_0.Op != OpAMD64MOVLconst || v_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0.Op != OpAMD64MOVLconst || v_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTSL)
@@ -23781,7 +23781,7 @@
 		}
 		y := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpAMD64MOVLconst || v_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0.Op != OpAMD64MOVLconst || v_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTSL)
@@ -30587,7 +30587,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64ORLconstmodify)
@@ -30640,7 +30640,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ORLload)
@@ -30718,7 +30718,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ORLmodify)
@@ -30771,7 +30771,7 @@
 		}
 		y := v_0.Args[1]
 		v_0_0 := v_0.Args[0]
-		if v_0_0.Op != OpAMD64MOVQconst || v_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0.Op != OpAMD64MOVQconst || v_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTSQ)
@@ -30791,7 +30791,7 @@
 		}
 		y := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpAMD64MOVQconst || v_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0.Op != OpAMD64MOVQconst || v_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTSQ)
@@ -30847,7 +30847,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ORQconst)
@@ -30865,7 +30865,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64ORQconst)
@@ -39574,7 +39574,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64ORQconstmodify)
@@ -39627,7 +39627,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ORQload)
@@ -39705,7 +39705,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64ORQmodify)
@@ -40158,7 +40158,7 @@
 		}
 		c := v_1.AuxInt
 		v.reset(OpAMD64ROLBconst)
-		v.AuxInt = (-c) & 7
+		v.AuxInt = -c & 7
 		v.AddArg(x)
 		return true
 	}
@@ -40173,7 +40173,7 @@
 		}
 		c := v_1.AuxInt
 		v.reset(OpAMD64ROLBconst)
-		v.AuxInt = (-c) & 7
+		v.AuxInt = -c & 7
 		v.AddArg(x)
 		return true
 	}
@@ -40221,7 +40221,7 @@
 		}
 		c := v_1.AuxInt
 		v.reset(OpAMD64ROLLconst)
-		v.AuxInt = (-c) & 31
+		v.AuxInt = -c & 31
 		v.AddArg(x)
 		return true
 	}
@@ -40236,7 +40236,7 @@
 		}
 		c := v_1.AuxInt
 		v.reset(OpAMD64ROLLconst)
-		v.AuxInt = (-c) & 31
+		v.AuxInt = -c & 31
 		v.AddArg(x)
 		return true
 	}
@@ -40284,7 +40284,7 @@
 		}
 		c := v_1.AuxInt
 		v.reset(OpAMD64ROLQconst)
-		v.AuxInt = (-c) & 63
+		v.AuxInt = -c & 63
 		v.AddArg(x)
 		return true
 	}
@@ -40299,7 +40299,7 @@
 		}
 		c := v_1.AuxInt
 		v.reset(OpAMD64ROLQconst)
-		v.AuxInt = (-c) & 63
+		v.AuxInt = -c & 63
 		v.AddArg(x)
 		return true
 	}
@@ -40347,7 +40347,7 @@
 		}
 		c := v_1.AuxInt
 		v.reset(OpAMD64ROLWconst)
-		v.AuxInt = (-c) & 15
+		v.AuxInt = -c & 15
 		v.AddArg(x)
 		return true
 	}
@@ -40362,7 +40362,7 @@
 		}
 		c := v_1.AuxInt
 		v.reset(OpAMD64ROLWconst)
-		v.AuxInt = (-c) & 15
+		v.AuxInt = -c & 15
 		v.AddArg(x)
 		return true
 	}
@@ -41060,7 +41060,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64SBBQconst)
@@ -41339,7 +41339,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETAEstore)
@@ -41520,7 +41520,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETAstore)
@@ -41841,7 +41841,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETBEstore)
@@ -42022,7 +42022,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETBstore)
@@ -42184,7 +42184,7 @@
 		}
 		x := v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
-		if v_0_0_0.Op != OpAMD64MOVLconst || v_0_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0_0.Op != OpAMD64MOVLconst || v_0_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETAE)
@@ -42210,7 +42210,7 @@
 		}
 		x := v_0_1.Args[1]
 		v_0_1_0 := v_0_1.Args[0]
-		if v_0_1_0.Op != OpAMD64MOVLconst || v_0_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_1_0.Op != OpAMD64MOVLconst || v_0_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETAE)
@@ -42235,7 +42235,7 @@
 		}
 		x := v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
-		if v_0_0_0.Op != OpAMD64MOVQconst || v_0_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0_0.Op != OpAMD64MOVQconst || v_0_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETAE)
@@ -42261,7 +42261,7 @@
 		}
 		x := v_0_1.Args[1]
 		v_0_1_0 := v_0_1.Args[0]
-		if v_0_1_0.Op != OpAMD64MOVQconst || v_0_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_1_0.Op != OpAMD64MOVQconst || v_0_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETAE)
@@ -42823,7 +42823,7 @@
 		}
 		x := v_1_0.Args[1]
 		v_1_0_0 := v_1_0.Args[0]
-		if v_1_0_0.Op != OpAMD64MOVLconst || v_1_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0_0.Op != OpAMD64MOVLconst || v_1_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETAEstore)
@@ -42857,7 +42857,7 @@
 		}
 		x := v_1_1.Args[1]
 		v_1_1_0 := v_1_1.Args[0]
-		if v_1_1_0.Op != OpAMD64MOVLconst || v_1_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_1_0.Op != OpAMD64MOVLconst || v_1_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETAEstore)
@@ -42890,7 +42890,7 @@
 		}
 		x := v_1_0.Args[1]
 		v_1_0_0 := v_1_0.Args[0]
-		if v_1_0_0.Op != OpAMD64MOVQconst || v_1_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0_0.Op != OpAMD64MOVQconst || v_1_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETAEstore)
@@ -42924,7 +42924,7 @@
 		}
 		x := v_1_1.Args[1]
 		v_1_1_0 := v_1_1.Args[0]
-		if v_1_1_0.Op != OpAMD64MOVQconst || v_1_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_1_0.Op != OpAMD64MOVQconst || v_1_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETAEstore)
@@ -43578,7 +43578,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETEQstore)
@@ -43899,7 +43899,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETGEstore)
@@ -44080,7 +44080,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETGstore)
@@ -44401,7 +44401,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETLEstore)
@@ -44582,7 +44582,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETLstore)
@@ -44744,7 +44744,7 @@
 		}
 		x := v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
-		if v_0_0_0.Op != OpAMD64MOVLconst || v_0_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0_0.Op != OpAMD64MOVLconst || v_0_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETB)
@@ -44770,7 +44770,7 @@
 		}
 		x := v_0_1.Args[1]
 		v_0_1_0 := v_0_1.Args[0]
-		if v_0_1_0.Op != OpAMD64MOVLconst || v_0_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_1_0.Op != OpAMD64MOVLconst || v_0_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETB)
@@ -44795,7 +44795,7 @@
 		}
 		x := v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
-		if v_0_0_0.Op != OpAMD64MOVQconst || v_0_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0_0.Op != OpAMD64MOVQconst || v_0_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETB)
@@ -44821,7 +44821,7 @@
 		}
 		x := v_0_1.Args[1]
 		v_0_1_0 := v_0_1.Args[0]
-		if v_0_1_0.Op != OpAMD64MOVQconst || v_0_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_1_0.Op != OpAMD64MOVQconst || v_0_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETB)
@@ -45383,7 +45383,7 @@
 		}
 		x := v_1_0.Args[1]
 		v_1_0_0 := v_1_0.Args[0]
-		if v_1_0_0.Op != OpAMD64MOVLconst || v_1_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0_0.Op != OpAMD64MOVLconst || v_1_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETBstore)
@@ -45417,7 +45417,7 @@
 		}
 		x := v_1_1.Args[1]
 		v_1_1_0 := v_1_1.Args[0]
-		if v_1_1_0.Op != OpAMD64MOVLconst || v_1_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_1_0.Op != OpAMD64MOVLconst || v_1_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETBstore)
@@ -45450,7 +45450,7 @@
 		}
 		x := v_1_0.Args[1]
 		v_1_0_0 := v_1_0.Args[0]
-		if v_1_0_0.Op != OpAMD64MOVQconst || v_1_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0_0.Op != OpAMD64MOVQconst || v_1_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETBstore)
@@ -45484,7 +45484,7 @@
 		}
 		x := v_1_1.Args[1]
 		v_1_1_0 := v_1_1.Args[0]
-		if v_1_1_0.Op != OpAMD64MOVQconst || v_1_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_1_0.Op != OpAMD64MOVQconst || v_1_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64SETBstore)
@@ -46138,7 +46138,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SETNEstore)
@@ -46519,7 +46519,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(!config.nacl) {
+		if !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTRLconst)
@@ -46778,7 +46778,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(!config.nacl) {
+		if !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTRQconst)
@@ -47127,7 +47127,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(!config.nacl) {
+		if !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTRLconst)
@@ -47386,7 +47386,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(!config.nacl) {
+		if !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTRQconst)
@@ -47612,7 +47612,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SUBLload)
@@ -47690,7 +47690,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SUBLmodify)
@@ -47742,7 +47742,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64SUBQconst)
@@ -47760,7 +47760,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64NEGQ)
@@ -47820,7 +47820,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64SUBQconstborrow)
@@ -47881,7 +47881,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(-c - d)) {
+		if !is32Bit(-c - d) {
 			break
 		}
 		v.reset(OpAMD64ADDQconst)
@@ -47908,7 +47908,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SUBQload)
@@ -47986,7 +47986,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SUBQmodify)
@@ -48070,7 +48070,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SUBSDload)
@@ -48178,7 +48178,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64SUBSSload)
@@ -48463,7 +48463,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64TESTQconst)
@@ -48482,7 +48482,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64TESTQconst)
@@ -48684,7 +48684,7 @@
 		}
 		off2 := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64XADDLlock)
@@ -48712,7 +48712,7 @@
 		}
 		off2 := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64XADDQlock)
@@ -48740,7 +48740,7 @@
 		}
 		off2 := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64XCHGL)
@@ -48794,7 +48794,7 @@
 		}
 		off2 := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64XCHGQ)
@@ -48847,7 +48847,7 @@
 		}
 		y := v_0.Args[1]
 		v_0_0 := v_0.Args[0]
-		if v_0_0.Op != OpAMD64MOVLconst || v_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0.Op != OpAMD64MOVLconst || v_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTCL)
@@ -48867,7 +48867,7 @@
 		}
 		y := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpAMD64MOVLconst || v_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0.Op != OpAMD64MOVLconst || v_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTCL)
@@ -49397,7 +49397,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64XORLconstmodify)
@@ -49450,7 +49450,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64XORLload)
@@ -49528,7 +49528,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64XORLmodify)
@@ -49581,7 +49581,7 @@
 		}
 		y := v_0.Args[1]
 		v_0_0 := v_0.Args[0]
-		if v_0_0.Op != OpAMD64MOVQconst || v_0_0.AuxInt != 1 || !(!config.nacl) {
+		if v_0_0.Op != OpAMD64MOVQconst || v_0_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTCQ)
@@ -49601,7 +49601,7 @@
 		}
 		y := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpAMD64MOVQconst || v_1_0.AuxInt != 1 || !(!config.nacl) {
+		if v_1_0.Op != OpAMD64MOVQconst || v_1_0.AuxInt != 1 || !!config.nacl {
 			break
 		}
 		v.reset(OpAMD64BTCQ)
@@ -49657,7 +49657,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64XORQconst)
@@ -49675,7 +49675,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpAMD64XORQconst)
@@ -49884,7 +49884,7 @@
 		}
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
-		if !(ValAndOff(valoff1).canAdd(off2)) {
+		if !ValAndOff(valoff1).canAdd(off2) {
 			break
 		}
 		v.reset(OpAMD64XORQconstmodify)
@@ -49937,7 +49937,7 @@
 		}
 		off2 := v_1.AuxInt
 		base := v_1.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64XORQload)
@@ -50015,7 +50015,7 @@
 		off2 := v_0.AuxInt
 		base := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpAMD64XORQmodify)
@@ -51039,7 +51039,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLEQ)
@@ -51061,7 +51061,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLNE)
@@ -51083,7 +51083,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLLT)
@@ -51105,7 +51105,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLGT)
@@ -51127,7 +51127,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLLE)
@@ -51149,7 +51149,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLGE)
@@ -51174,7 +51174,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLHI)
@@ -51196,7 +51196,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLCS)
@@ -51218,7 +51218,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLCC)
@@ -51240,7 +51240,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLLS)
@@ -51262,7 +51262,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLEQF)
@@ -51284,7 +51284,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLNEF)
@@ -51306,7 +51306,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLGTF)
@@ -51328,7 +51328,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is32BitInt(t)) {
+		if !is32BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVLGEF)
@@ -51350,7 +51350,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWEQ)
@@ -51372,7 +51372,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWNE)
@@ -51397,7 +51397,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWLT)
@@ -51419,7 +51419,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWGT)
@@ -51441,7 +51441,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWLE)
@@ -51463,7 +51463,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWGE)
@@ -51485,7 +51485,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWHI)
@@ -51507,7 +51507,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWCS)
@@ -51529,7 +51529,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWCC)
@@ -51551,7 +51551,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWLS)
@@ -51573,7 +51573,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWEQF)
@@ -51595,7 +51595,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWNEF)
@@ -51622,7 +51622,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWGTF)
@@ -51644,7 +51644,7 @@
 			break
 		}
 		cond := v_2.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64CMOVWGEF)
@@ -53288,7 +53288,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is16BitInt(t)) {
+		if !is16BitInt(t) {
 			break
 		}
 		v.reset(OpAMD64MOVWload)
@@ -53318,7 +53318,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is32BitFloat(t)) {
+		if !is32BitFloat(t) {
 			break
 		}
 		v.reset(OpAMD64MOVSSload)
@@ -53333,7 +53333,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is64BitFloat(t)) {
+		if !is64BitFloat(t) {
 			break
 		}
 		v.reset(OpAMD64MOVSDload)
@@ -53387,7 +53387,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53409,7 +53409,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53428,7 +53428,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53450,7 +53450,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53469,7 +53469,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53491,7 +53491,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53510,7 +53510,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53532,7 +53532,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53551,7 +53551,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53573,7 +53573,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53592,7 +53592,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53614,7 +53614,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53633,7 +53633,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53655,7 +53655,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53674,7 +53674,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53696,7 +53696,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53715,7 +53715,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDQ)
@@ -53737,7 +53737,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLQ)
@@ -53756,7 +53756,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDQ)
@@ -53778,7 +53778,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLQ)
@@ -53797,7 +53797,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDQ)
@@ -53819,7 +53819,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLQ)
@@ -53838,7 +53838,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDQ)
@@ -53860,7 +53860,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLQ)
@@ -53879,7 +53879,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53901,7 +53901,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53920,7 +53920,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53942,7 +53942,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -53961,7 +53961,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -53983,7 +53983,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -54002,7 +54002,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -54024,7 +54024,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHLL)
@@ -54274,7 +54274,7 @@
 		mem := v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
-		if !(config.useSSE) {
+		if !config.useSSE {
 			break
 		}
 		v.reset(OpAMD64MOVOstore)
@@ -54296,7 +54296,7 @@
 		mem := v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
-		if !(!config.useSSE) {
+		if !!config.useSSE {
 			break
 		}
 		v.reset(OpAMD64MOVQstore)
@@ -54354,7 +54354,7 @@
 		mem := v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
-		if !(config.useSSE) {
+		if !config.useSSE {
 			break
 		}
 		v.reset(OpMove)
@@ -54385,7 +54385,7 @@
 		mem := v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
-		if !(config.useSSE) {
+		if !config.useSSE {
 			break
 		}
 		v.reset(OpMove)
@@ -55465,7 +55465,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -55487,7 +55487,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRW)
@@ -55506,7 +55506,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -55528,7 +55528,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRW)
@@ -55547,7 +55547,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -55569,7 +55569,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRW)
@@ -55588,7 +55588,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -55610,7 +55610,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRW)
@@ -55629,7 +55629,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARW)
@@ -55654,7 +55654,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARW)
@@ -55673,7 +55673,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARW)
@@ -55698,7 +55698,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARW)
@@ -55717,7 +55717,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARW)
@@ -55742,7 +55742,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARW)
@@ -55761,7 +55761,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARW)
@@ -55786,7 +55786,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARW)
@@ -55805,7 +55805,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -55827,7 +55827,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRL)
@@ -55846,7 +55846,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -55868,7 +55868,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRL)
@@ -55887,7 +55887,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -55909,7 +55909,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRL)
@@ -55928,7 +55928,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -55950,7 +55950,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRL)
@@ -55969,7 +55969,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARL)
@@ -55994,7 +55994,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARL)
@@ -56013,7 +56013,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARL)
@@ -56038,7 +56038,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARL)
@@ -56057,7 +56057,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARL)
@@ -56082,7 +56082,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARL)
@@ -56101,7 +56101,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARL)
@@ -56126,7 +56126,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARL)
@@ -56145,7 +56145,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDQ)
@@ -56167,7 +56167,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRQ)
@@ -56186,7 +56186,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDQ)
@@ -56208,7 +56208,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRQ)
@@ -56227,7 +56227,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDQ)
@@ -56249,7 +56249,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRQ)
@@ -56268,7 +56268,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDQ)
@@ -56290,7 +56290,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRQ)
@@ -56309,7 +56309,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARQ)
@@ -56334,7 +56334,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARQ)
@@ -56353,7 +56353,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARQ)
@@ -56378,7 +56378,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARQ)
@@ -56397,7 +56397,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARQ)
@@ -56422,7 +56422,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARQ)
@@ -56441,7 +56441,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARQ)
@@ -56466,7 +56466,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARQ)
@@ -56485,7 +56485,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -56507,7 +56507,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRB)
@@ -56526,7 +56526,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -56548,7 +56548,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRB)
@@ -56567,7 +56567,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -56589,7 +56589,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRB)
@@ -56608,7 +56608,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64ANDL)
@@ -56630,7 +56630,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SHRB)
@@ -56649,7 +56649,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARB)
@@ -56674,7 +56674,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARB)
@@ -56693,7 +56693,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARB)
@@ -56718,7 +56718,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARB)
@@ -56737,7 +56737,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARB)
@@ -56762,7 +56762,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARB)
@@ -56781,7 +56781,7 @@
 		t := v.Type
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(!shiftIsBounded(v)) {
+		if !!shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARB)
@@ -56806,7 +56806,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpAMD64SARB)
@@ -57719,7 +57719,7 @@
 		}
 		mem := v.Args[1]
 		destptr := v.Args[0]
-		if !(!config.useSSE) {
+		if !!config.useSSE {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconst)
@@ -57741,7 +57741,7 @@
 		}
 		mem := v.Args[1]
 		destptr := v.Args[0]
-		if !(!config.useSSE) {
+		if !!config.useSSE {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconst)
@@ -57767,7 +57767,7 @@
 		}
 		mem := v.Args[1]
 		destptr := v.Args[0]
-		if !(!config.useSSE) {
+		if !!config.useSSE {
 			break
 		}
 		v.reset(OpAMD64MOVQstoreconst)
@@ -57865,7 +57865,7 @@
 		}
 		mem := v.Args[1]
 		destptr := v.Args[0]
-		if !(config.useSSE) {
+		if !config.useSSE {
 			break
 		}
 		v.reset(OpAMD64MOVOstore)
@@ -57885,7 +57885,7 @@
 		}
 		mem := v.Args[1]
 		destptr := v.Args[0]
-		if !(config.useSSE) {
+		if !config.useSSE {
 			break
 		}
 		v.reset(OpAMD64MOVOstore)
@@ -57914,7 +57914,7 @@
 		}
 		mem := v.Args[1]
 		destptr := v.Args[0]
-		if !(config.useSSE) {
+		if !config.useSSE {
 			break
 		}
 		v.reset(OpAMD64MOVOstore)
@@ -57952,7 +57952,7 @@
 		}
 		mem := v.Args[1]
 		destptr := v.Args[0]
-		if !(config.useSSE) {
+		if !config.useSSE {
 			break
 		}
 		v.reset(OpAMD64MOVOstore)
@@ -58114,7 +58114,7 @@
 			}
 			x := v_0.Args[1]
 			v_0_0 := v_0.Args[0]
-			if v_0_0.Op != OpAMD64MOVLconst || v_0_0.AuxInt != 1 || !(!config.nacl) {
+			if v_0_0.Op != OpAMD64MOVLconst || v_0_0.AuxInt != 1 || !!config.nacl {
 				break
 			}
 			b.Kind = BlockAMD64UGE
@@ -58137,7 +58137,7 @@
 			}
 			x := v_1.Args[1]
 			v_1_0 := v_1.Args[0]
-			if v_1_0.Op != OpAMD64MOVLconst || v_1_0.AuxInt != 1 || !(!config.nacl) {
+			if v_1_0.Op != OpAMD64MOVLconst || v_1_0.AuxInt != 1 || !!config.nacl {
 				break
 			}
 			b.Kind = BlockAMD64UGE
@@ -58159,7 +58159,7 @@
 			}
 			x := v_0.Args[1]
 			v_0_0 := v_0.Args[0]
-			if v_0_0.Op != OpAMD64MOVQconst || v_0_0.AuxInt != 1 || !(!config.nacl) {
+			if v_0_0.Op != OpAMD64MOVQconst || v_0_0.AuxInt != 1 || !!config.nacl {
 				break
 			}
 			b.Kind = BlockAMD64UGE
@@ -58182,7 +58182,7 @@
 			}
 			x := v_1.Args[1]
 			v_1_0 := v_1.Args[0]
-			if v_1_0.Op != OpAMD64MOVQconst || v_1_0.AuxInt != 1 || !(!config.nacl) {
+			if v_1_0.Op != OpAMD64MOVQconst || v_1_0.AuxInt != 1 || !!config.nacl {
 				break
 			}
 			b.Kind = BlockAMD64UGE
@@ -59379,7 +59379,7 @@
 			}
 			x := v_0.Args[1]
 			v_0_0 := v_0.Args[0]
-			if v_0_0.Op != OpAMD64MOVLconst || v_0_0.AuxInt != 1 || !(!config.nacl) {
+			if v_0_0.Op != OpAMD64MOVLconst || v_0_0.AuxInt != 1 || !!config.nacl {
 				break
 			}
 			b.Kind = BlockAMD64ULT
@@ -59402,7 +59402,7 @@
 			}
 			x := v_1.Args[1]
 			v_1_0 := v_1.Args[0]
-			if v_1_0.Op != OpAMD64MOVLconst || v_1_0.AuxInt != 1 || !(!config.nacl) {
+			if v_1_0.Op != OpAMD64MOVLconst || v_1_0.AuxInt != 1 || !!config.nacl {
 				break
 			}
 			b.Kind = BlockAMD64ULT
@@ -59424,7 +59424,7 @@
 			}
 			x := v_0.Args[1]
 			v_0_0 := v_0.Args[0]
-			if v_0_0.Op != OpAMD64MOVQconst || v_0_0.AuxInt != 1 || !(!config.nacl) {
+			if v_0_0.Op != OpAMD64MOVQconst || v_0_0.AuxInt != 1 || !!config.nacl {
 				break
 			}
 			b.Kind = BlockAMD64ULT
@@ -59447,7 +59447,7 @@
 			}
 			x := v_1.Args[1]
 			v_1_0 := v_1.Args[0]
-			if v_1_0.Op != OpAMD64MOVQconst || v_1_0.AuxInt != 1 || !(!config.nacl) {
+			if v_1_0.Op != OpAMD64MOVQconst || v_1_0.AuxInt != 1 || !!config.nacl {
 				break
 			}
 			b.Kind = BlockAMD64ULT
diff --git a/src/cmd/compile/internal/ssa/rewriteARM.go b/src/cmd/compile/internal/ssa/rewriteARM.go
index a192556..e059c93 100644
--- a/src/cmd/compile/internal/ssa/rewriteARM.go
+++ b/src/cmd/compile/internal/ssa/rewriteARM.go
@@ -6304,7 +6304,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVBUload)
@@ -6370,7 +6370,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpARMMOVWconst)
@@ -6397,7 +6397,7 @@
 			break
 		}
 		x := v_2.Args[2]
-		if !(isSamePtr(ptr, ptr2)) {
+		if !isSamePtr(ptr, ptr2) {
 			break
 		}
 		v.reset(OpARMMOVBUreg)
@@ -6545,7 +6545,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVBload)
@@ -6623,7 +6623,7 @@
 			break
 		}
 		x := v_2.Args[2]
-		if !(isSamePtr(ptr, ptr2)) {
+		if !isSamePtr(ptr, ptr2) {
 			break
 		}
 		v.reset(OpARMMOVBreg)
@@ -6780,7 +6780,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVBstore)
@@ -6991,7 +6991,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVDload)
@@ -7086,7 +7086,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVDstore)
@@ -7152,7 +7152,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVFload)
@@ -7247,7 +7247,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVFstore)
@@ -7315,7 +7315,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVHUload)
@@ -7381,7 +7381,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpARMMOVWconst)
@@ -7408,7 +7408,7 @@
 			break
 		}
 		x := v_2.Args[2]
-		if !(isSamePtr(ptr, ptr2)) {
+		if !isSamePtr(ptr, ptr2) {
 			break
 		}
 		v.reset(OpARMMOVHUreg)
@@ -7579,7 +7579,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVHload)
@@ -7657,7 +7657,7 @@
 			break
 		}
 		x := v_2.Args[2]
-		if !(isSamePtr(ptr, ptr2)) {
+		if !isSamePtr(ptr, ptr2) {
 			break
 		}
 		v.reset(OpARMMOVHreg)
@@ -7860,7 +7860,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVHstore)
@@ -8033,7 +8033,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVWload)
@@ -8178,7 +8178,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpARMMOVWconst)
@@ -8205,7 +8205,7 @@
 			break
 		}
 		x := v_2.Args[2]
-		if !(isSamePtr(ptr, ptr2)) {
+		if !isSamePtr(ptr, ptr2) {
 			break
 		}
 		v.reset(OpCopy)
@@ -8583,7 +8583,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpARMMOVWstore)
@@ -9031,7 +9031,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARMSLLconst)
@@ -9049,7 +9049,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARMSLLconst)
@@ -9419,7 +9419,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARMADD)
@@ -9641,7 +9641,7 @@
 		}
 		c := v_0.AuxInt
 		x := v.Args[1]
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARMADD)
@@ -9965,7 +9965,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARMRSB)
@@ -10187,7 +10187,7 @@
 		}
 		c := v_0.AuxInt
 		x := v.Args[1]
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARMRSB)
@@ -17845,7 +17845,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(t.IsBoolean()) {
+		if !t.IsBoolean() {
 			break
 		}
 		v.reset(OpARMMOVBUload)
@@ -17935,7 +17935,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is32BitFloat(t)) {
+		if !is32BitFloat(t) {
 			break
 		}
 		v.reset(OpARMMOVFload)
@@ -17950,7 +17950,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is64BitFloat(t)) {
+		if !is64BitFloat(t) {
 			break
 		}
 		v.reset(OpARMMOVDload)
@@ -19916,7 +19916,7 @@
 			break
 		}
 		c := v_0_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARMSRLconst)
@@ -19980,7 +19980,7 @@
 			break
 		}
 		c := v_0_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARMANDconst)
diff --git a/src/cmd/compile/internal/ssa/rewriteARM64.go b/src/cmd/compile/internal/ssa/rewriteARM64.go
index f6f8301..a5a3c29 100644
--- a/src/cmd/compile/internal/ssa/rewriteARM64.go
+++ b/src/cmd/compile/internal/ssa/rewriteARM64.go
@@ -1245,7 +1245,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ADDshiftLL)
@@ -1265,7 +1265,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ADDshiftLL)
@@ -1286,7 +1286,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ADDshiftRL)
@@ -1306,7 +1306,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ADDshiftRL)
@@ -1327,7 +1327,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ADDshiftRA)
@@ -1347,7 +1347,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ADDshiftRA)
@@ -2316,7 +2316,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ANDshiftLL)
@@ -2336,7 +2336,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ANDshiftLL)
@@ -2357,7 +2357,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ANDshiftRL)
@@ -2377,7 +2377,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ANDshiftRL)
@@ -2398,7 +2398,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ANDshiftRA)
@@ -2421,7 +2421,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ANDshiftRA)
@@ -2536,7 +2536,7 @@
 		}
 		sc := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, ac, sc)) {
+		if !isARM64BFMask(sc, ac, sc) {
 			break
 		}
 		v.reset(OpARM64UBFIZ)
@@ -2555,7 +2555,7 @@
 		}
 		sc := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, ac, 0)) {
+		if !isARM64BFMask(sc, ac, 0) {
 			break
 		}
 		v.reset(OpARM64UBFX)
@@ -2778,7 +2778,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64BICshiftLL)
@@ -2799,7 +2799,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64BICshiftRL)
@@ -2820,7 +2820,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64BICshiftRA)
@@ -2987,7 +2987,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64CMNshiftLL)
@@ -3007,7 +3007,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64CMNshiftLL)
@@ -3028,7 +3028,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64CMNshiftRL)
@@ -3048,7 +3048,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64CMNshiftRL)
@@ -3069,7 +3069,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64CMNshiftRA)
@@ -3089,7 +3089,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64CMNshiftRA)
@@ -3457,7 +3457,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64CMPshiftLL)
@@ -3477,7 +3477,7 @@
 		}
 		c := x0.AuxInt
 		y := x0.Args[0]
-		if !(clobberIfDead(x0)) {
+		if !clobberIfDead(x0) {
 			break
 		}
 		v.reset(OpARM64InvertFlags)
@@ -3500,7 +3500,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64CMPshiftRL)
@@ -3520,7 +3520,7 @@
 		}
 		c := x0.AuxInt
 		y := x0.Args[0]
-		if !(clobberIfDead(x0)) {
+		if !clobberIfDead(x0) {
 			break
 		}
 		v.reset(OpARM64InvertFlags)
@@ -3543,7 +3543,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64CMPshiftRA)
@@ -3563,7 +3563,7 @@
 		}
 		c := x0.AuxInt
 		y := x0.Args[0]
-		if !(clobberIfDead(x0)) {
+		if !clobberIfDead(x0) {
 			break
 		}
 		v.reset(OpARM64InvertFlags)
@@ -4290,7 +4290,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64EONshiftLL)
@@ -4311,7 +4311,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64EONshiftRL)
@@ -4332,7 +4332,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64EONshiftRA)
@@ -6313,7 +6313,7 @@
 			break
 		}
 		c := v_2.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64ADDshiftLL)
@@ -6527,7 +6527,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64ADDshiftLL)
@@ -6795,7 +6795,7 @@
 			break
 		}
 		c := v_2.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64ADDshiftLL)
@@ -7024,7 +7024,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64ADDshiftLL)
@@ -7308,7 +7308,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64NEG)
@@ -7328,7 +7328,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64NEG)
@@ -7784,7 +7784,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64NEG)
@@ -7804,7 +7804,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64NEG)
@@ -8286,7 +8286,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpARM64MOVDconst)
@@ -8418,7 +8418,7 @@
 	// result: (MOVDreg x)
 	for {
 		x := v.Args[0]
-		if !(x.Type.IsBoolean()) {
+		if !x.Type.IsBoolean() {
 			break
 		}
 		v.reset(OpARM64MOVDreg)
@@ -8435,7 +8435,7 @@
 		}
 		sc := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<8-1, sc)) {
+		if !isARM64BFMask(sc, 1<<8-1, sc) {
 			break
 		}
 		v.reset(OpARM64UBFIZ)
@@ -8453,7 +8453,7 @@
 		}
 		sc := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<8-1, 0)) {
+		if !isARM64BFMask(sc, 1<<8-1, 0) {
 			break
 		}
 		v.reset(OpARM64UBFX)
@@ -11081,7 +11081,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpARM64MOVDconst)
@@ -11914,7 +11914,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpARM64MOVDconst)
@@ -12192,7 +12192,7 @@
 		}
 		sc := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<16-1, sc)) {
+		if !isARM64BFMask(sc, 1<<16-1, sc) {
 			break
 		}
 		v.reset(OpARM64UBFIZ)
@@ -12213,7 +12213,7 @@
 		}
 		sc := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<16-1, 0)) {
+		if !isARM64BFMask(sc, 1<<16-1, 0) {
 			break
 		}
 		v.reset(OpARM64UBFX)
@@ -14184,7 +14184,7 @@
 		sym := v.Aux
 		_ = v.Args[1]
 		v_0 := v.Args[0]
-		if v_0.Op != OpSB || !(symIsRO(sym)) {
+		if v_0.Op != OpSB || !symIsRO(sym) {
 			break
 		}
 		v.reset(OpARM64MOVDconst)
@@ -14490,7 +14490,7 @@
 		}
 		sc := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<32-1, sc)) {
+		if !isARM64BFMask(sc, 1<<32-1, sc) {
 			break
 		}
 		v.reset(OpARM64UBFIZ)
@@ -14508,7 +14508,7 @@
 		}
 		sc := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<32-1, 0)) {
+		if !isARM64BFMask(sc, 1<<32-1, 0) {
 			break
 		}
 		v.reset(OpARM64UBFX)
@@ -16007,7 +16007,7 @@
 			break
 		}
 		c := v_2.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64SUBshiftLL)
@@ -16221,7 +16221,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64SUBshiftLL)
@@ -16489,7 +16489,7 @@
 			break
 		}
 		c := v_2.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64SUBshiftLL)
@@ -16718,7 +16718,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64SUBshiftLL)
@@ -17030,7 +17030,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64SLLconst)
@@ -17048,7 +17048,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64SLLconst)
@@ -17515,7 +17515,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64SLLconst)
@@ -17533,7 +17533,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64SLLconst)
@@ -17876,7 +17876,7 @@
 		}
 		c := x.AuxInt
 		y := x.Args[0]
-		if !(clobberIfDead(x)) {
+		if !clobberIfDead(x) {
 			break
 		}
 		v.reset(OpARM64MVNshiftLL)
@@ -17894,7 +17894,7 @@
 		}
 		c := x.AuxInt
 		y := x.Args[0]
-		if !(clobberIfDead(x)) {
+		if !clobberIfDead(x) {
 			break
 		}
 		v.reset(OpARM64MVNshiftRL)
@@ -17912,7 +17912,7 @@
 		}
 		c := x.AuxInt
 		y := x.Args[0]
-		if !(clobberIfDead(x)) {
+		if !clobberIfDead(x) {
 			break
 		}
 		v.reset(OpARM64MVNshiftRA)
@@ -18021,7 +18021,7 @@
 		}
 		c := x.AuxInt
 		y := x.Args[0]
-		if !(clobberIfDead(x)) {
+		if !clobberIfDead(x) {
 			break
 		}
 		v.reset(OpARM64NEGshiftLL)
@@ -18039,7 +18039,7 @@
 		}
 		c := x.AuxInt
 		y := x.Args[0]
-		if !(clobberIfDead(x)) {
+		if !clobberIfDead(x) {
 			break
 		}
 		v.reset(OpARM64NEGshiftRL)
@@ -18057,7 +18057,7 @@
 		}
 		c := x.AuxInt
 		y := x.Args[0]
-		if !(clobberIfDead(x)) {
+		if !clobberIfDead(x) {
 			break
 		}
 		v.reset(OpARM64NEGshiftRA)
@@ -18268,7 +18268,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ORshiftLL)
@@ -18288,7 +18288,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ORshiftLL)
@@ -18309,7 +18309,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ORshiftRL)
@@ -18329,7 +18329,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ORshiftRL)
@@ -18350,7 +18350,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ORshiftRA)
@@ -18375,7 +18375,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ORshiftRA)
@@ -22179,7 +22179,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ORNshiftLL)
@@ -22200,7 +22200,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ORNshiftRL)
@@ -22221,7 +22221,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64ORNshiftRA)
@@ -24441,7 +24441,7 @@
 		}
 		ac := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, ac, 0)) {
+		if !isARM64BFMask(sc, ac, 0) {
 			break
 		}
 		v.reset(OpARM64UBFIZ)
@@ -24459,7 +24459,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<32-1, 0)) {
+		if !isARM64BFMask(sc, 1<<32-1, 0) {
 			break
 		}
 		v.reset(OpARM64UBFIZ)
@@ -24477,7 +24477,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<16-1, 0)) {
+		if !isARM64BFMask(sc, 1<<16-1, 0) {
 			break
 		}
 		v.reset(OpARM64UBFIZ)
@@ -24495,7 +24495,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<8-1, 0)) {
+		if !isARM64BFMask(sc, 1<<8-1, 0) {
 			break
 		}
 		v.reset(OpARM64UBFIZ)
@@ -24768,7 +24768,7 @@
 		}
 		ac := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, ac, sc)) {
+		if !isARM64BFMask(sc, ac, sc) {
 			break
 		}
 		v.reset(OpARM64UBFX)
@@ -24786,7 +24786,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<32-1, sc)) {
+		if !isARM64BFMask(sc, 1<<32-1, sc) {
 			break
 		}
 		v.reset(OpARM64UBFX)
@@ -24804,7 +24804,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<16-1, sc)) {
+		if !isARM64BFMask(sc, 1<<16-1, sc) {
 			break
 		}
 		v.reset(OpARM64UBFX)
@@ -24822,7 +24822,7 @@
 			break
 		}
 		x := v_0.Args[0]
-		if !(isARM64BFMask(sc, 1<<8-1, sc)) {
+		if !isARM64BFMask(sc, 1<<8-1, sc) {
 			break
 		}
 		v.reset(OpARM64UBFX)
@@ -25173,7 +25173,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64SUBshiftLL)
@@ -25194,7 +25194,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64SUBshiftRL)
@@ -25218,7 +25218,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64SUBshiftRA)
@@ -25443,7 +25443,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64TSTshiftLL)
@@ -25463,7 +25463,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64TSTshiftLL)
@@ -25484,7 +25484,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64TSTshiftRL)
@@ -25504,7 +25504,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64TSTshiftRL)
@@ -25525,7 +25525,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64TSTshiftRA)
@@ -25545,7 +25545,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64TSTshiftRA)
@@ -25931,7 +25931,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64SRLconst)
@@ -26062,7 +26062,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpARM64ANDconst)
@@ -26249,7 +26249,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64XORshiftLL)
@@ -26269,7 +26269,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64XORshiftLL)
@@ -26290,7 +26290,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64XORshiftRL)
@@ -26310,7 +26310,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64XORshiftRL)
@@ -26331,7 +26331,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64XORshiftRA)
@@ -26356,7 +26356,7 @@
 		}
 		c := x1.AuxInt
 		y := x1.Args[0]
-		if !(clobberIfDead(x1)) {
+		if !clobberIfDead(x1) {
 			break
 		}
 		v.reset(OpARM64XORshiftRA)
@@ -29393,7 +29393,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(t.IsBoolean()) {
+		if !t.IsBoolean() {
 			break
 		}
 		v.reset(OpARM64MOVBUload)
@@ -29513,7 +29513,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is32BitFloat(t)) {
+		if !is32BitFloat(t) {
 			break
 		}
 		v.reset(OpARM64FMOVSload)
@@ -29528,7 +29528,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is64BitFloat(t)) {
+		if !is64BitFloat(t) {
 			break
 		}
 		v.reset(OpARM64FMOVDload)
@@ -33661,7 +33661,7 @@
 		for v.Op == OpARM64TSTconst {
 			c := v.AuxInt
 			x := v.Args[0]
-			if !(oneBit(c)) {
+			if !oneBit(c) {
 				break
 			}
 			b.Kind = BlockARM64TBZ
@@ -33675,7 +33675,7 @@
 		for v.Op == OpARM64TSTWconst {
 			c := v.AuxInt
 			x := v.Args[0]
-			if !(oneBit(int64(uint32(c)))) {
+			if !oneBit(int64(uint32(c))) {
 				break
 			}
 			b.Kind = BlockARM64TBZ
@@ -35941,7 +35941,7 @@
 		for v.Op == OpARM64TSTconst {
 			c := v.AuxInt
 			x := v.Args[0]
-			if !(oneBit(c)) {
+			if !oneBit(c) {
 				break
 			}
 			b.Kind = BlockARM64TBNZ
@@ -35955,7 +35955,7 @@
 		for v.Op == OpARM64TSTWconst {
 			c := v.AuxInt
 			x := v.Args[0]
-			if !(oneBit(int64(uint32(c)))) {
+			if !oneBit(int64(uint32(c))) {
 				break
 			}
 			b.Kind = BlockARM64TBNZ
@@ -36146,7 +36146,7 @@
 		for v.Op == OpARM64ANDconst {
 			c := v.AuxInt
 			x := v.Args[0]
-			if !(oneBit(c)) {
+			if !oneBit(c) {
 				break
 			}
 			b.Kind = BlockARM64TBNZ
@@ -36186,7 +36186,7 @@
 		for v.Op == OpARM64ANDconst {
 			c := v.AuxInt
 			x := v.Args[0]
-			if !(oneBit(int64(uint32(c)))) {
+			if !oneBit(int64(uint32(c))) {
 				break
 			}
 			b.Kind = BlockARM64TBNZ
@@ -36438,7 +36438,7 @@
 		for v.Op == OpARM64ANDconst {
 			c := v.AuxInt
 			x := v.Args[0]
-			if !(oneBit(c)) {
+			if !oneBit(c) {
 				break
 			}
 			b.Kind = BlockARM64TBZ
@@ -36478,7 +36478,7 @@
 		for v.Op == OpARM64ANDconst {
 			c := v.AuxInt
 			x := v.Args[0]
-			if !(oneBit(int64(uint32(c)))) {
+			if !oneBit(int64(uint32(c))) {
 				break
 			}
 			b.Kind = BlockARM64TBZ
diff --git a/src/cmd/compile/internal/ssa/rewriteMIPS.go b/src/cmd/compile/internal/ssa/rewriteMIPS.go
index 98bb5f3..6dceef7 100644
--- a/src/cmd/compile/internal/ssa/rewriteMIPS.go
+++ b/src/cmd/compile/internal/ssa/rewriteMIPS.go
@@ -695,7 +695,7 @@
 		mem := v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
-		if !(!config.BigEndian) {
+		if !!config.BigEndian {
 			break
 		}
 		v.reset(OpMIPSLoweredAtomicAnd)
@@ -744,7 +744,7 @@
 		mem := v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
-		if !(config.BigEndian) {
+		if !config.BigEndian {
 			break
 		}
 		v.reset(OpMIPSLoweredAtomicAnd)
@@ -859,7 +859,7 @@
 		mem := v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
-		if !(!config.BigEndian) {
+		if !!config.BigEndian {
 			break
 		}
 		v.reset(OpMIPSLoweredAtomicOr)
@@ -891,7 +891,7 @@
 		mem := v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
-		if !(config.BigEndian) {
+		if !config.BigEndian {
 			break
 		}
 		v.reset(OpMIPSLoweredAtomicOr)
@@ -2130,7 +2130,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(t.IsBoolean()) {
+		if !t.IsBoolean() {
 			break
 		}
 		v.reset(OpMIPSMOVBUload)
@@ -2220,7 +2220,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is32BitFloat(t)) {
+		if !is32BitFloat(t) {
 			break
 		}
 		v.reset(OpMIPSMOVFload)
@@ -2235,7 +2235,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is64BitFloat(t)) {
+		if !is64BitFloat(t) {
 			break
 		}
 		v.reset(OpMIPSMOVDload)
@@ -2989,7 +2989,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpMIPSLoweredAtomicAddconst)
@@ -3055,7 +3055,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVBUload)
@@ -3208,7 +3208,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVBload)
@@ -3368,7 +3368,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVBstore)
@@ -3537,7 +3537,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVBstorezero)
@@ -3587,7 +3587,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVDload)
@@ -3665,7 +3665,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVDstore)
@@ -3716,7 +3716,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVFload)
@@ -3794,7 +3794,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVFstore)
@@ -3845,7 +3845,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVHUload)
@@ -4021,7 +4021,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVHload)
@@ -4227,7 +4227,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVHstore)
@@ -4356,7 +4356,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVHstorezero)
@@ -4406,7 +4406,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVWload)
@@ -4511,7 +4511,7 @@
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVWstore)
@@ -4600,7 +4600,7 @@
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
 		ptr := v_0.Args[0]
-		if !(canMergeSym(sym1, sym2)) {
+		if !canMergeSym(sym1, sym2) {
 			break
 		}
 		v.reset(OpMIPSMOVWstorezero)
@@ -4699,7 +4699,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(int64(uint32(c)))) {
+		if !isPowerOfTwo(int64(uint32(c))) {
 			break
 		}
 		v.reset(OpMIPSSLLconst)
@@ -4718,7 +4718,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(int64(uint32(c)))) {
+		if !isPowerOfTwo(int64(uint32(c))) {
 			break
 		}
 		v.reset(OpMIPSSLLconst)
@@ -7831,7 +7831,7 @@
 			break
 		}
 		c := v_0_0.AuxInt
-		if !(isPowerOfTwo(int64(uint32(c)))) {
+		if !isPowerOfTwo(int64(uint32(c))) {
 			break
 		}
 		v.reset(OpMIPSSRLconst)
@@ -7854,7 +7854,7 @@
 			break
 		}
 		c := v_0_1.AuxInt
-		if !(isPowerOfTwo(int64(uint32(c)))) {
+		if !isPowerOfTwo(int64(uint32(c))) {
 			break
 		}
 		v.reset(OpMIPSSRLconst)
@@ -8112,7 +8112,7 @@
 			break
 		}
 		c := v_0_0.AuxInt
-		if !(isPowerOfTwo(int64(uint32(c)))) {
+		if !isPowerOfTwo(int64(uint32(c))) {
 			break
 		}
 		v.reset(OpMIPSSLLconst)
@@ -8135,7 +8135,7 @@
 			break
 		}
 		c := v_0_1.AuxInt
-		if !(isPowerOfTwo(int64(uint32(c)))) {
+		if !isPowerOfTwo(int64(uint32(c))) {
 			break
 		}
 		v.reset(OpMIPSSLLconst)
diff --git a/src/cmd/compile/internal/ssa/rewriteMIPS64.go b/src/cmd/compile/internal/ssa/rewriteMIPS64.go
index 1be2769..9f4879c 100644
--- a/src/cmd/compile/internal/ssa/rewriteMIPS64.go
+++ b/src/cmd/compile/internal/ssa/rewriteMIPS64.go
@@ -2463,7 +2463,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(t.IsBoolean()) {
+		if !t.IsBoolean() {
 			break
 		}
 		v.reset(OpMIPS64MOVBUload)
@@ -2583,7 +2583,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is32BitFloat(t)) {
+		if !is32BitFloat(t) {
 			break
 		}
 		v.reset(OpMIPS64MOVFload)
@@ -2598,7 +2598,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is64BitFloat(t)) {
+		if !is64BitFloat(t) {
 			break
 		}
 		v.reset(OpMIPS64MOVDload)
@@ -3081,7 +3081,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64ADDVconst)
@@ -3099,7 +3099,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64ADDVconst)
@@ -3192,7 +3192,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpMIPS64ADDVconst)
@@ -3211,7 +3211,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c - d)) {
+		if !is32Bit(c - d) {
 			break
 		}
 		v.reset(OpMIPS64ADDVconst)
@@ -3233,7 +3233,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64ANDconst)
@@ -3251,7 +3251,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64ANDconst)
@@ -3338,7 +3338,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64LoweredAtomicAddconst32)
@@ -3361,7 +3361,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64LoweredAtomicAddconst64)
@@ -3420,7 +3420,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVBUload)
@@ -3508,7 +3508,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVBload)
@@ -3597,7 +3597,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVBstore)
@@ -3788,7 +3788,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVBstorezero)
@@ -3838,7 +3838,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVDload)
@@ -3889,7 +3889,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVDstore)
@@ -3942,7 +3942,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVFload)
@@ -3993,7 +3993,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVFstore)
@@ -4046,7 +4046,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVHUload)
@@ -4157,7 +4157,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVHload)
@@ -4292,7 +4292,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVHstore)
@@ -4443,7 +4443,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVHstorezero)
@@ -4493,7 +4493,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVVload)
@@ -4571,7 +4571,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVVstore)
@@ -4642,7 +4642,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVVstorezero)
@@ -4692,7 +4692,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVWUload)
@@ -4826,7 +4826,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVWload)
@@ -5010,7 +5010,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVWstore)
@@ -5121,7 +5121,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is32Bit(off1 + off2)) {
+		if !is32Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpMIPS64MOVWstorezero)
@@ -5184,7 +5184,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64NORconst)
@@ -5202,7 +5202,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64NORconst)
@@ -5240,7 +5240,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64ORconst)
@@ -5258,7 +5258,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64ORconst)
@@ -5327,7 +5327,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c | d)) {
+		if !is32Bit(c | d) {
 			break
 		}
 		v.reset(OpMIPS64ORconst)
@@ -5348,7 +5348,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64SGTconst)
@@ -5369,7 +5369,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64SGTUconst)
@@ -5834,7 +5834,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64SUBVconst)
@@ -5904,7 +5904,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(-c - d)) {
+		if !is32Bit(-c - d) {
 			break
 		}
 		v.reset(OpMIPS64ADDVconst)
@@ -5923,7 +5923,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(-c + d)) {
+		if !is32Bit(-c + d) {
 			break
 		}
 		v.reset(OpMIPS64ADDVconst)
@@ -5945,7 +5945,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64XORconst)
@@ -5963,7 +5963,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpMIPS64XORconst)
@@ -6033,7 +6033,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c ^ d)) {
+		if !is32Bit(c ^ d) {
 			break
 		}
 		v.reset(OpMIPS64XORconst)
@@ -8308,7 +8308,7 @@
 			break
 		}
 		c := v_0_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpMIPS64ANDconst)
@@ -8478,7 +8478,7 @@
 			break
 		}
 		c := v_0_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpMIPS64SLLVconst)
@@ -8500,7 +8500,7 @@
 			break
 		}
 		c := v_0_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpMIPS64SLLVconst)
@@ -8625,7 +8625,7 @@
 			break
 		}
 		c := v_0_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpMIPS64SLLVconst)
@@ -8648,7 +8648,7 @@
 			break
 		}
 		c := v_0_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpMIPS64SLLVconst)
@@ -8689,7 +8689,7 @@
 			break
 		}
 		c := v_0_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpMIPS64SRLVconst)
diff --git a/src/cmd/compile/internal/ssa/rewritePPC64.go b/src/cmd/compile/internal/ssa/rewritePPC64.go
index 4d2dfc1..18cb4b3 100644
--- a/src/cmd/compile/internal/ssa/rewritePPC64.go
+++ b/src/cmd/compile/internal/ssa/rewritePPC64.go
@@ -2883,7 +2883,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(t.IsBoolean()) {
+		if !t.IsBoolean() {
 			break
 		}
 		v.reset(OpPPC64MOVBZload)
@@ -2930,7 +2930,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is32BitFloat(t)) {
+		if !is32BitFloat(t) {
 			break
 		}
 		v.reset(OpPPC64FMOVSload)
@@ -2945,7 +2945,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is64BitFloat(t)) {
+		if !is64BitFloat(t) {
 			break
 		}
 		v.reset(OpPPC64FMOVDload)
@@ -2977,7 +2977,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -3053,7 +3053,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -3146,7 +3146,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -3182,7 +3182,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -3220,7 +3220,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -3296,7 +3296,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -3389,7 +3389,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -3488,7 +3488,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -3526,7 +3526,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLD)
@@ -3602,7 +3602,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLD)
@@ -3695,7 +3695,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLD)
@@ -3794,7 +3794,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLD)
@@ -3832,7 +3832,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -3908,7 +3908,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -4001,7 +4001,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -4037,7 +4037,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SLW)
@@ -5161,7 +5161,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpPPC64ADDconst)
@@ -5179,7 +5179,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpPPC64ADDconst)
@@ -5201,7 +5201,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpPPC64ADDconst)
@@ -5323,7 +5323,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isU16Bit(c)) {
+		if !isU16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64ANDconst)
@@ -5341,7 +5341,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isU16Bit(c)) {
+		if !isU16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64ANDconst)
@@ -5703,7 +5703,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64CMPconst)
@@ -5721,7 +5721,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64InvertFlags)
@@ -5746,7 +5746,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isU16Bit(c)) {
+		if !isU16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64CMPUconst)
@@ -5764,7 +5764,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isU16Bit(c)) {
+		if !isU16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64InvertFlags)
@@ -5869,7 +5869,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64CMPWconst)
@@ -5887,7 +5887,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64InvertFlags)
@@ -5941,7 +5941,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isU16Bit(c)) {
+		if !isU16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64CMPWUconst)
@@ -5959,7 +5959,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isU16Bit(c)) {
+		if !isU16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64InvertFlags)
@@ -6438,7 +6438,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64FMOVDload)
@@ -6485,7 +6485,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64FMOVDstore)
@@ -6562,7 +6562,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64FMOVSload)
@@ -6589,7 +6589,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64FMOVSstore)
@@ -7792,7 +7792,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVBZload)
@@ -7840,7 +7840,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVBZload)
@@ -7860,7 +7860,7 @@
 		}
 		c := v_0.AuxInt
 		ptr := v.Args[1]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVBZload)
@@ -8252,7 +8252,7 @@
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
 		val := v.Args[1]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVBstore)
@@ -9068,7 +9068,7 @@
 		}
 		c := v_1.AuxInt
 		val := v.Args[2]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVBstore)
@@ -9090,7 +9090,7 @@
 		c := v_0.AuxInt
 		ptr := v.Args[1]
 		val := v.Args[2]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVBstore)
@@ -9389,7 +9389,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVBstorezero)
@@ -9483,7 +9483,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVDload)
@@ -9531,7 +9531,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVDload)
@@ -9551,7 +9551,7 @@
 		}
 		c := v_0.AuxInt
 		ptr := v.Args[1]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVDload)
@@ -9597,7 +9597,7 @@
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
 		val := v.Args[1]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVDstore)
@@ -9691,7 +9691,7 @@
 		}
 		c := v_1.AuxInt
 		val := v.Args[2]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVDstore)
@@ -9713,7 +9713,7 @@
 		c := v_0.AuxInt
 		ptr := v.Args[1]
 		val := v.Args[2]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVDstore)
@@ -9739,7 +9739,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVDstorezero)
@@ -9888,7 +9888,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVHZload)
@@ -9936,7 +9936,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVHZload)
@@ -9956,7 +9956,7 @@
 		}
 		c := v_0.AuxInt
 		ptr := v.Args[1]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVHZload)
@@ -10254,7 +10254,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVHload)
@@ -10302,7 +10302,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVHload)
@@ -10322,7 +10322,7 @@
 		}
 		c := v_0.AuxInt
 		ptr := v.Args[1]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVHload)
@@ -10596,7 +10596,7 @@
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
 		val := v.Args[1]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVHstore)
@@ -10836,7 +10836,7 @@
 		}
 		c := v_1.AuxInt
 		val := v.Args[2]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVHstore)
@@ -10858,7 +10858,7 @@
 		c := v_0.AuxInt
 		ptr := v.Args[1]
 		val := v.Args[2]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVHstore)
@@ -10972,7 +10972,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVHstorezero)
@@ -11085,7 +11085,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVWZload)
@@ -11133,7 +11133,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVWZload)
@@ -11153,7 +11153,7 @@
 		}
 		c := v_0.AuxInt
 		ptr := v.Args[1]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVWZload)
@@ -11551,7 +11551,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVWload)
@@ -11599,7 +11599,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVWload)
@@ -11619,7 +11619,7 @@
 		}
 		c := v_0.AuxInt
 		ptr := v.Args[1]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVWload)
@@ -11957,7 +11957,7 @@
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
 		val := v.Args[1]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVWstore)
@@ -12091,7 +12091,7 @@
 		}
 		c := v_1.AuxInt
 		val := v.Args[2]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVWstore)
@@ -12113,7 +12113,7 @@
 		c := v_0.AuxInt
 		ptr := v.Args[1]
 		val := v.Args[2]
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpPPC64MOVWstore)
@@ -12183,7 +12183,7 @@
 		}
 		off2 := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is16Bit(off1 + off2)) {
+		if !is16Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpPPC64MOVWstorezero)
@@ -12662,7 +12662,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpPPC64ORconst)
@@ -12680,7 +12680,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpPPC64ORconst)
@@ -22226,7 +22226,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(-c)) {
+		if !is32Bit(-c) {
 			break
 		}
 		v.reset(OpPPC64ADDconst)
@@ -22549,7 +22549,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpPPC64XORconst)
@@ -22567,7 +22567,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpPPC64XORconst)
@@ -22871,7 +22871,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -22955,7 +22955,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -23056,7 +23056,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -23096,7 +23096,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -23138,7 +23138,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -23222,7 +23222,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -23327,7 +23327,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -23367,7 +23367,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -23409,7 +23409,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -23485,7 +23485,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -23578,7 +23578,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -23787,7 +23787,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -23825,7 +23825,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -23901,7 +23901,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -23996,7 +23996,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -24205,7 +24205,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -24243,7 +24243,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRD)
@@ -24319,7 +24319,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRD)
@@ -24412,7 +24412,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRD)
@@ -24621,7 +24621,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRD)
@@ -24659,7 +24659,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAD)
@@ -24735,7 +24735,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAD)
@@ -24830,7 +24830,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAD)
@@ -25039,7 +25039,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAD)
@@ -25077,7 +25077,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -25161,7 +25161,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -25262,7 +25262,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -25302,7 +25302,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRW)
@@ -25344,7 +25344,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -25428,7 +25428,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -25533,7 +25533,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -25573,7 +25573,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpPPC64SRAW)
@@ -25928,7 +25928,7 @@
 	for {
 		t := v.Type
 		x := v.Args[0]
-		if !(isSigned(t)) {
+		if !isSigned(t) {
 			break
 		}
 		v.reset(OpPPC64MOVBreg)
@@ -25951,7 +25951,7 @@
 	for {
 		t := v.Type
 		x := v.Args[0]
-		if !(isSigned(t)) {
+		if !isSigned(t) {
 			break
 		}
 		v.reset(OpPPC64MOVHreg)
@@ -25974,7 +25974,7 @@
 	for {
 		t := v.Type
 		x := v.Args[0]
-		if !(isSigned(t)) {
+		if !isSigned(t) {
 			break
 		}
 		v.reset(OpPPC64MOVBreg)
@@ -25997,7 +25997,7 @@
 	for {
 		t := v.Type
 		x := v.Args[0]
-		if !(isSigned(t)) {
+		if !isSigned(t) {
 			break
 		}
 		v.reset(OpPPC64MOVHreg)
@@ -26020,7 +26020,7 @@
 	for {
 		t := v.Type
 		x := v.Args[0]
-		if !(isSigned(t)) {
+		if !isSigned(t) {
 			break
 		}
 		v.reset(OpPPC64MOVWreg)
@@ -26043,7 +26043,7 @@
 	for {
 		t := v.Type
 		x := v.Args[0]
-		if !(isSigned(t)) {
+		if !isSigned(t) {
 			break
 		}
 		v.reset(OpPPC64MOVBreg)
diff --git a/src/cmd/compile/internal/ssa/rewriteS390X.go b/src/cmd/compile/internal/ssa/rewriteS390X.go
index ac2fbf8..6c55d02 100644
--- a/src/cmd/compile/internal/ssa/rewriteS390X.go
+++ b/src/cmd/compile/internal/ssa/rewriteS390X.go
@@ -3214,7 +3214,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is32BitFloat(t)) {
+		if !is32BitFloat(t) {
 			break
 		}
 		v.reset(OpS390XFMOVSload)
@@ -3229,7 +3229,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is64BitFloat(t)) {
+		if !is64BitFloat(t) {
 			break
 		}
 		v.reset(OpS390XFMOVDload)
@@ -3261,7 +3261,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3303,7 +3303,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3343,7 +3343,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3383,7 +3383,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3425,7 +3425,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3467,7 +3467,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3507,7 +3507,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3547,7 +3547,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3589,7 +3589,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLD)
@@ -3631,7 +3631,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLD)
@@ -3671,7 +3671,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLD)
@@ -3711,7 +3711,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLD)
@@ -3753,7 +3753,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3795,7 +3795,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3835,7 +3835,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -3875,7 +3875,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSLW)
@@ -4821,7 +4821,7 @@
 	for {
 		off := v.AuxInt
 		ptr := v.Args[0]
-		if !(is32Bit(off)) {
+		if !is32Bit(off) {
 			break
 		}
 		v.reset(OpS390XADDconst)
@@ -5158,7 +5158,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -5204,7 +5204,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -5248,7 +5248,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -5292,7 +5292,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -5338,7 +5338,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -5382,7 +5382,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -5424,7 +5424,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -5466,7 +5466,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -5510,7 +5510,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -5552,7 +5552,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -5592,7 +5592,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -5632,7 +5632,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -5674,7 +5674,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -5713,7 +5713,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -5750,7 +5750,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -5788,7 +5788,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -5828,7 +5828,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRD)
@@ -5870,7 +5870,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRD)
@@ -5910,7 +5910,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRD)
@@ -5950,7 +5950,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRD)
@@ -5992,7 +5992,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAD)
@@ -6031,7 +6031,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAD)
@@ -6068,7 +6068,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAD)
@@ -6106,7 +6106,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAD)
@@ -6146,7 +6146,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -6192,7 +6192,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -6236,7 +6236,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -6280,7 +6280,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRW)
@@ -6326,7 +6326,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -6370,7 +6370,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -6412,7 +6412,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -6454,7 +6454,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpS390XSRAW)
@@ -6501,7 +6501,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpS390XADDconst)
@@ -6519,7 +6519,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpS390XADDconst)
@@ -6772,7 +6772,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpS390XADDCconst)
@@ -6790,7 +6790,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is16Bit(c)) {
+		if !is16Bit(c) {
 			break
 		}
 		v.reset(OpS390XADDCconst)
@@ -7386,7 +7386,7 @@
 		s := v_0.Aux
 		y := v_0.Args[1]
 		x := v_0.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVDaddridx)
@@ -7432,7 +7432,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(c + d)) {
+		if !is32Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XADDconst)
@@ -7461,7 +7461,7 @@
 		_ = v_2.Args[2]
 		ptr2 := v_2.Args[0]
 		y := v_2.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XADD)
@@ -8346,7 +8346,7 @@
 		_ = v_2.Args[2]
 		ptr2 := v_2.Args[0]
 		y := v_2.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XAND)
@@ -8422,7 +8422,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpS390XCMPconst)
@@ -8440,7 +8440,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpS390XInvertFlags)
@@ -8465,7 +8465,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpS390XCMPUconst)
@@ -8483,7 +8483,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpS390XInvertFlags)
@@ -9474,7 +9474,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XLDGR)
@@ -9496,7 +9496,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpCopy)
@@ -9517,7 +9517,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XFMOVDload)
@@ -9618,7 +9618,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XFMOVDloadidx)
@@ -9643,7 +9643,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XFMOVDloadidx)
@@ -9671,7 +9671,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XFMOVDstore)
@@ -9780,7 +9780,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XFMOVDstoreidx)
@@ -9807,7 +9807,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XFMOVDstoreidx)
@@ -9837,7 +9837,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpCopy)
@@ -9858,7 +9858,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XFMOVSload)
@@ -9959,7 +9959,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XFMOVSloadidx)
@@ -9984,7 +9984,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XFMOVSloadidx)
@@ -10012,7 +10012,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XFMOVSstore)
@@ -10121,7 +10121,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XFMOVSstoreidx)
@@ -10148,7 +10148,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XFMOVSstoreidx)
@@ -10650,7 +10650,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XMOVBZreg)
@@ -10670,7 +10670,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVBZload)
@@ -10771,7 +10771,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBZloadidx)
@@ -10796,7 +10796,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBZloadidx)
@@ -10821,7 +10821,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBZloadidx)
@@ -10846,7 +10846,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBZloadidx)
@@ -10870,7 +10870,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBZreg)
@@ -10886,7 +10886,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBZreg)
@@ -10902,7 +10902,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBZreg)
@@ -10918,7 +10918,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBZreg)
@@ -10934,7 +10934,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBZreg)
@@ -10950,7 +10950,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBZreg)
@@ -11157,7 +11157,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XMOVBreg)
@@ -11177,7 +11177,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVBload)
@@ -11278,7 +11278,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBloadidx)
@@ -11303,7 +11303,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBloadidx)
@@ -11328,7 +11328,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBloadidx)
@@ -11353,7 +11353,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBloadidx)
@@ -11377,7 +11377,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBreg)
@@ -11393,7 +11393,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBreg)
@@ -11409,7 +11409,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBreg)
@@ -11425,7 +11425,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBreg)
@@ -11441,7 +11441,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBreg)
@@ -11457,7 +11457,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBreg)
@@ -11680,7 +11680,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVBstore)
@@ -12065,7 +12065,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(ValAndOff(sc).Off() + off)) {
+		if !is20Bit(ValAndOff(sc).Off() + off) {
 			break
 		}
 		v.reset(OpS390XMOVBstoreconst)
@@ -12144,7 +12144,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBstoreidx)
@@ -12171,7 +12171,7 @@
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBstoreidx)
@@ -12198,7 +12198,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBstoreidx)
@@ -12225,7 +12225,7 @@
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVBstoreidx)
@@ -13435,7 +13435,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpCopy)
@@ -13458,7 +13458,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XLGDR)
@@ -13478,7 +13478,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVDload)
@@ -13580,7 +13580,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVDloadidx)
@@ -13605,7 +13605,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVDloadidx)
@@ -13630,7 +13630,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVDloadidx)
@@ -13655,7 +13655,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVDloadidx)
@@ -13683,7 +13683,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVDstore)
@@ -13910,7 +13910,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU12Bit(ValAndOff(sc).Off() + off)) {
+		if !isU12Bit(ValAndOff(sc).Off() + off) {
 			break
 		}
 		v.reset(OpS390XMOVDstoreconst)
@@ -13962,7 +13962,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVDstoreidx)
@@ -13989,7 +13989,7 @@
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVDstoreidx)
@@ -14016,7 +14016,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVDstoreidx)
@@ -14043,7 +14043,7 @@
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVDstoreidx)
@@ -14744,7 +14744,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XMOVHZreg)
@@ -14764,7 +14764,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVHZload)
@@ -14866,7 +14866,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHZloadidx)
@@ -14891,7 +14891,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHZloadidx)
@@ -14916,7 +14916,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHZloadidx)
@@ -14941,7 +14941,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHZloadidx)
@@ -14964,7 +14964,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBZreg)
@@ -14980,7 +14980,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHZreg)
@@ -14996,7 +14996,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHZreg)
@@ -15012,7 +15012,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHZreg)
@@ -15028,7 +15028,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHZreg)
@@ -15259,7 +15259,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XMOVHreg)
@@ -15279,7 +15279,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVHload)
@@ -15381,7 +15381,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHloadidx)
@@ -15406,7 +15406,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHloadidx)
@@ -15431,7 +15431,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHloadidx)
@@ -15456,7 +15456,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHloadidx)
@@ -15479,7 +15479,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBreg)
@@ -15495,7 +15495,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHreg)
@@ -15511,7 +15511,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHreg)
@@ -15527,7 +15527,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHreg)
@@ -15543,7 +15543,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHreg)
@@ -15868,7 +15868,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVHstore)
@@ -16130,7 +16130,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU12Bit(ValAndOff(sc).Off() + off)) {
+		if !isU12Bit(ValAndOff(sc).Off() + off) {
 			break
 		}
 		v.reset(OpS390XMOVHstoreconst)
@@ -16212,7 +16212,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHstoreidx)
@@ -16239,7 +16239,7 @@
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHstoreidx)
@@ -16266,7 +16266,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHstoreidx)
@@ -16293,7 +16293,7 @@
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVHstoreidx)
@@ -17199,7 +17199,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XMOVWZreg)
@@ -17219,7 +17219,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVWZload)
@@ -17321,7 +17321,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWZloadidx)
@@ -17346,7 +17346,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWZloadidx)
@@ -17371,7 +17371,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWZloadidx)
@@ -17396,7 +17396,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWZloadidx)
@@ -17419,7 +17419,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBZreg)
@@ -17435,7 +17435,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHZreg)
@@ -17451,7 +17451,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVWZreg)
@@ -17467,7 +17467,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVWZreg)
@@ -17732,7 +17732,7 @@
 		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XMOVWreg)
@@ -17752,7 +17752,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVWload)
@@ -17854,7 +17854,7 @@
 		d := v_0.AuxInt
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWloadidx)
@@ -17879,7 +17879,7 @@
 		}
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWloadidx)
@@ -17904,7 +17904,7 @@
 		}
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWloadidx)
@@ -17929,7 +17929,7 @@
 		d := v_0.AuxInt
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWloadidx)
@@ -17952,7 +17952,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVBreg)
@@ -17968,7 +17968,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVHreg)
@@ -17984,7 +17984,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVWreg)
@@ -18000,7 +18000,7 @@
 			break
 		}
 		x := e.Args[0]
-		if !(clobberIfDead(e)) {
+		if !clobberIfDead(e) {
 			break
 		}
 		v.reset(OpS390XMOVWreg)
@@ -18410,7 +18410,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(is20Bit(off1 + off2)) {
+		if !is20Bit(off1 + off2) {
 			break
 		}
 		v.reset(OpS390XMOVWstore)
@@ -18705,7 +18705,7 @@
 		}
 		off := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU12Bit(ValAndOff(sc).Off() + off)) {
+		if !isU12Bit(ValAndOff(sc).Off() + off) {
 			break
 		}
 		v.reset(OpS390XMOVWstoreconst)
@@ -18787,7 +18787,7 @@
 		ptr := v_0.Args[0]
 		idx := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWstoreidx)
@@ -18814,7 +18814,7 @@
 		d := v_1.AuxInt
 		ptr := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWstoreidx)
@@ -18841,7 +18841,7 @@
 		d := v_1.AuxInt
 		idx := v_1.Args[0]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWstoreidx)
@@ -18868,7 +18868,7 @@
 		idx := v_0.Args[0]
 		ptr := v.Args[1]
 		val := v.Args[2]
-		if !(is20Bit(c + d)) {
+		if !is20Bit(c + d) {
 			break
 		}
 		v.reset(OpS390XMOVWstoreidx)
@@ -19165,7 +19165,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpS390XMULLDconst)
@@ -19183,7 +19183,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpS390XMULLDconst)
@@ -19340,7 +19340,7 @@
 	for {
 		c := v.AuxInt
 		x := v.Args[0]
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpS390XSLDconst)
@@ -19416,7 +19416,7 @@
 		_ = v_2.Args[2]
 		ptr2 := v_2.Args[0]
 		y := v_2.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XMULLD)
@@ -19764,7 +19764,7 @@
 	for {
 		c := v.AuxInt
 		x := v.Args[0]
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpS390XSLWconst)
@@ -19935,7 +19935,7 @@
 	// result: (XOR (MOVDconst [-1]) x)
 	for {
 		x := v.Args[0]
-		if !(true) {
+		if !true {
 			break
 		}
 		v.reset(OpS390XXOR)
@@ -19953,7 +19953,7 @@
 	// result: (XORWconst [-1] x)
 	for {
 		x := v.Args[0]
-		if !(true) {
+		if !true {
 			break
 		}
 		v.reset(OpS390XXORWconst)
@@ -19976,7 +19976,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpS390XORconst)
@@ -19994,7 +19994,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpS390XORconst)
@@ -32860,7 +32860,7 @@
 		_ = v_2.Args[2]
 		ptr2 := v_2.Args[0]
 		y := v_2.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XOR)
@@ -34190,7 +34190,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpS390XSUBconst)
@@ -34208,7 +34208,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(is32Bit(c)) {
+		if !is32Bit(c) {
 			break
 		}
 		v.reset(OpS390XNEG)
@@ -34568,7 +34568,7 @@
 		}
 		d := v_0.AuxInt
 		x := v_0.Args[0]
-		if !(is32Bit(-c - d)) {
+		if !is32Bit(-c - d) {
 			break
 		}
 		v.reset(OpS390XADDconst)
@@ -34597,7 +34597,7 @@
 		_ = v_2.Args[2]
 		ptr2 := v_2.Args[0]
 		y := v_2.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XSUB)
@@ -34724,7 +34724,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpS390XXORconst)
@@ -34742,7 +34742,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isU32Bit(c)) {
+		if !isU32Bit(c) {
 			break
 		}
 		v.reset(OpS390XXORconst)
@@ -35393,7 +35393,7 @@
 		_ = v_2.Args[2]
 		ptr2 := v_2.Args[0]
 		y := v_2.Args[1]
-		if !(isSamePtr(ptr1, ptr2)) {
+		if !isSamePtr(ptr1, ptr2) {
 			break
 		}
 		v.reset(OpS390XXOR)
@@ -36448,8 +36448,7 @@
 	}
 }
 func rewriteBlockS390X(b *Block) bool {
-	config := b.Func.Config
-	typ := &config.Types
+	typ := &b.Func.Config.Types
 	v := b.Control
 	switch b.Kind {
 	case BlockS390XBRC:
diff --git a/src/cmd/compile/internal/ssa/rewriteWasm.go b/src/cmd/compile/internal/ssa/rewriteWasm.go
index a7f3f39..2cd0b26 100644
--- a/src/cmd/compile/internal/ssa/rewriteWasm.go
+++ b/src/cmd/compile/internal/ssa/rewriteWasm.go
@@ -2252,7 +2252,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is32BitFloat(t)) {
+		if !is32BitFloat(t) {
 			break
 		}
 		v.reset(OpWasmF32Load)
@@ -2267,7 +2267,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(is64BitFloat(t)) {
+		if !is64BitFloat(t) {
 			break
 		}
 		v.reset(OpWasmF64Load)
@@ -2556,7 +2556,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpWasmI64Shl)
@@ -4030,7 +4030,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpWasmI64ShrU)
@@ -4155,7 +4155,7 @@
 	for {
 		y := v.Args[1]
 		x := v.Args[0]
-		if !(shiftIsBounded(v)) {
+		if !shiftIsBounded(v) {
 			break
 		}
 		v.reset(OpWasmI64ShrS)
@@ -4404,7 +4404,7 @@
 	// result: (I64Extend16S x)
 	for {
 		x := v.Args[0]
-		if !(objabi.GOWASM.SignExt) {
+		if !objabi.GOWASM.SignExt {
 			break
 		}
 		v.reset(OpWasmI64Extend16S)
@@ -4449,7 +4449,7 @@
 	// result: (I64Extend16S x)
 	for {
 		x := v.Args[0]
-		if !(objabi.GOWASM.SignExt) {
+		if !objabi.GOWASM.SignExt {
 			break
 		}
 		v.reset(OpWasmI64Extend16S)
@@ -4494,7 +4494,7 @@
 	// result: (I64Extend32S x)
 	for {
 		x := v.Args[0]
-		if !(objabi.GOWASM.SignExt) {
+		if !objabi.GOWASM.SignExt {
 			break
 		}
 		v.reset(OpWasmI64Extend32S)
@@ -4539,7 +4539,7 @@
 	// result: (I64Extend8S x)
 	for {
 		x := v.Args[0]
-		if !(objabi.GOWASM.SignExt) {
+		if !objabi.GOWASM.SignExt {
 			break
 		}
 		v.reset(OpWasmI64Extend8S)
@@ -4584,7 +4584,7 @@
 	// result: (I64Extend8S x)
 	for {
 		x := v.Args[0]
-		if !(objabi.GOWASM.SignExt) {
+		if !objabi.GOWASM.SignExt {
 			break
 		}
 		v.reset(OpWasmI64Extend8S)
@@ -4629,7 +4629,7 @@
 	// result: (I64Extend8S x)
 	for {
 		x := v.Args[0]
-		if !(objabi.GOWASM.SignExt) {
+		if !objabi.GOWASM.SignExt {
 			break
 		}
 		v.reset(OpWasmI64Extend8S)
@@ -4706,7 +4706,7 @@
 		mem := v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
-		if !(is64BitFloat(t.(*types.Type))) {
+		if !is64BitFloat(t.(*types.Type)) {
 			break
 		}
 		v.reset(OpWasmF64Store)
@@ -4723,7 +4723,7 @@
 		mem := v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
-		if !(is32BitFloat(t.(*types.Type))) {
+		if !is32BitFloat(t.(*types.Type)) {
 			break
 		}
 		v.reset(OpWasmF32Store)
@@ -5135,7 +5135,7 @@
 		off2 := v_0.AuxInt
 		sym := v_0.Aux
 		base := v_0.Args[0]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmLoweredAddr)
@@ -5297,7 +5297,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Load)
@@ -5341,7 +5341,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Load16S)
@@ -5367,7 +5367,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Load16U)
@@ -5411,7 +5411,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Load32S)
@@ -5437,7 +5437,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Load32U)
@@ -5481,7 +5481,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Load8S)
@@ -5505,7 +5505,7 @@
 		}
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Load8U)
@@ -5771,7 +5771,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Store)
@@ -5797,7 +5797,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Store16)
@@ -5823,7 +5823,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Store32)
@@ -5849,7 +5849,7 @@
 		off2 := v_0.AuxInt
 		ptr := v_0.Args[0]
 		val := v.Args[1]
-		if !(isU32Bit(off + off2)) {
+		if !isU32Bit(off + off2) {
 			break
 		}
 		v.reset(OpWasmI64Store8)
diff --git a/src/cmd/compile/internal/ssa/rewritedec.go b/src/cmd/compile/internal/ssa/rewritedec.go
index ca29f1c..ee5dd3e 100644
--- a/src/cmd/compile/internal/ssa/rewritedec.go
+++ b/src/cmd/compile/internal/ssa/rewritedec.go
@@ -157,7 +157,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(t.IsString()) {
+		if !t.IsString() {
 			break
 		}
 		v.reset(OpStringMake)
@@ -181,7 +181,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(t.IsSlice()) {
+		if !t.IsSlice() {
 			break
 		}
 		v.reset(OpSliceMake)
@@ -212,7 +212,7 @@
 		t := v.Type
 		mem := v.Args[1]
 		ptr := v.Args[0]
-		if !(t.IsInterface()) {
+		if !t.IsInterface() {
 			break
 		}
 		v.reset(OpIMake)
diff --git a/src/cmd/compile/internal/ssa/rewritedec64.go b/src/cmd/compile/internal/ssa/rewritedec64.go
index 34645ce..b4dbf1c 100644
--- a/src/cmd/compile/internal/ssa/rewritedec64.go
+++ b/src/cmd/compile/internal/ssa/rewritedec64.go
@@ -360,7 +360,7 @@
 	for {
 		t := v.Type
 		c := v.AuxInt
-		if !(t.IsSigned()) {
+		if !t.IsSigned() {
 			break
 		}
 		v.reset(OpInt64Make)
@@ -378,7 +378,7 @@
 	for {
 		t := v.Type
 		c := v.AuxInt
-		if !(!t.IsSigned()) {
+		if !!t.IsSigned() {
 			break
 		}
 		v.reset(OpInt64Make)
diff --git a/src/cmd/compile/internal/ssa/rewritedecArgs.go b/src/cmd/compile/internal/ssa/rewritedecArgs.go
index 0f6d01f..bfa2095 100644
--- a/src/cmd/compile/internal/ssa/rewritedecArgs.go
+++ b/src/cmd/compile/internal/ssa/rewritedecArgs.go
@@ -21,7 +21,7 @@
 	for {
 		off := v.AuxInt
 		n := v.Aux
-		if !(v.Type.IsString()) {
+		if !v.Type.IsString() {
 			break
 		}
 		v.reset(OpStringMake)
@@ -41,7 +41,7 @@
 	for {
 		off := v.AuxInt
 		n := v.Aux
-		if !(v.Type.IsSlice()) {
+		if !v.Type.IsSlice() {
 			break
 		}
 		v.reset(OpSliceMake)
@@ -65,7 +65,7 @@
 	for {
 		off := v.AuxInt
 		n := v.Aux
-		if !(v.Type.IsInterface()) {
+		if !v.Type.IsInterface() {
 			break
 		}
 		v.reset(OpIMake)
diff --git a/src/cmd/compile/internal/ssa/rewritegeneric.go b/src/cmd/compile/internal/ssa/rewritegeneric.go
index be1aefb..4fc1e5f 100644
--- a/src/cmd/compile/internal/ssa/rewritegeneric.go
+++ b/src/cmd/compile/internal/ssa/rewritegeneric.go
@@ -6905,7 +6905,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpRsh16x64)
@@ -6940,7 +6940,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(smagicOK(16, c)) {
+		if !smagicOK(16, c) {
 			break
 		}
 		v.reset(OpSub16)
@@ -7007,7 +7007,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c & 0xffff)) {
+		if !isPowerOfTwo(c & 0xffff) {
 			break
 		}
 		v.reset(OpRsh16Ux64)
@@ -7259,7 +7259,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpRsh32x64)
@@ -7431,7 +7431,7 @@
 		}
 		t := v_1.Type
 		c := v_1.AuxInt
-		if !(reciprocalExact32(auxTo32F(c))) {
+		if !reciprocalExact32(auxTo32F(c)) {
 			break
 		}
 		v.reset(OpMul32F)
@@ -7480,7 +7480,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c & 0xffffffff)) {
+		if !isPowerOfTwo(c & 0xffffffff) {
 			break
 		}
 		v.reset(OpRsh32Ux64)
@@ -7740,7 +7740,7 @@
 		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst64 || v_1.AuxInt != -1<<63 || !(isNonNegative(n)) {
+		if v_1.Op != OpConst64 || v_1.AuxInt != -1<<63 || !isNonNegative(n) {
 			break
 		}
 		v.reset(OpConst64)
@@ -7805,7 +7805,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpRsh64x64)
@@ -7937,7 +7937,7 @@
 		}
 		t := v_1.Type
 		c := v_1.AuxInt
-		if !(reciprocalExact64(auxTo64F(c))) {
+		if !reciprocalExact64(auxTo64F(c)) {
 			break
 		}
 		v.reset(OpMul64F)
@@ -7986,7 +7986,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpRsh64Ux64)
@@ -8207,7 +8207,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpRsh8x64)
@@ -8242,7 +8242,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(smagicOK(8, c)) {
+		if !smagicOK(8, c) {
 			break
 		}
 		v.reset(OpSub8)
@@ -8308,7 +8308,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c & 0xff)) {
+		if !isPowerOfTwo(c & 0xff) {
 			break
 		}
 		v.reset(OpRsh8Ux64)
@@ -8329,7 +8329,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(umagicOK(8, c)) {
+		if !umagicOK(8, c) {
 			break
 		}
 		v.reset(OpTrunc32to8)
@@ -11906,7 +11906,7 @@
 		}
 		y := v_0_1.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst16 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst16 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq16)
@@ -11938,7 +11938,7 @@
 		}
 		y := v_0_0.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst16 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst16 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq16)
@@ -11971,7 +11971,7 @@
 		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
-		if v_1_1.Op != OpConst16 || v_1_1.Type != t || v_1_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_1.Op != OpConst16 || v_1_1.Type != t || v_1_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq16)
@@ -12007,7 +12007,7 @@
 		}
 		x := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpConst16 || v_1_0.Type != t || v_1_0.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_0.Op != OpConst16 || v_1_0.Type != t || v_1_0.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq16)
@@ -18500,7 +18500,7 @@
 		}
 		y := v_0_1.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst32 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst32 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq32)
@@ -18532,7 +18532,7 @@
 		}
 		y := v_0_0.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst32 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst32 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq32)
@@ -18565,7 +18565,7 @@
 		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
-		if v_1_1.Op != OpConst32 || v_1_1.Type != t || v_1_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_1.Op != OpConst32 || v_1_1.Type != t || v_1_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq32)
@@ -18597,7 +18597,7 @@
 		}
 		x := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpConst32 || v_1_0.Type != t || v_1_0.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_0.Op != OpConst32 || v_1_0.Type != t || v_1_0.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq32)
@@ -22725,7 +22725,7 @@
 		}
 		y := v_0_1.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst64 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst64 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq64)
@@ -22757,7 +22757,7 @@
 		}
 		y := v_0_0.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst64 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst64 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq64)
@@ -22790,7 +22790,7 @@
 		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
-		if v_1_1.Op != OpConst64 || v_1_1.Type != t || v_1_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_1.Op != OpConst64 || v_1_1.Type != t || v_1_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq64)
@@ -22822,7 +22822,7 @@
 		}
 		x := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpConst64 || v_1_0.Type != t || v_1_0.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_0.Op != OpConst64 || v_1_0.Type != t || v_1_0.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq64)
@@ -24684,7 +24684,7 @@
 		}
 		y := v_0_1.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst8 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst8 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq8)
@@ -24716,7 +24716,7 @@
 		}
 		y := v_0_0.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst8 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst8 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq8)
@@ -24749,7 +24749,7 @@
 		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
-		if v_1_1.Op != OpConst8 || v_1_1.Type != t || v_1_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_1.Op != OpConst8 || v_1_1.Type != t || v_1_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq8)
@@ -24781,7 +24781,7 @@
 		}
 		x := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpConst8 || v_1_0.Type != t || v_1_0.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_0.Op != OpConst8 || v_1_0.Type != t || v_1_0.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpNeq8)
@@ -25221,7 +25221,7 @@
 		}
 		o1 := v_0.AuxInt
 		p1 := v_0.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpConstBool)
@@ -25240,7 +25240,7 @@
 		}
 		o1 := v_1.AuxInt
 		p1 := v_1.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpConstBool)
@@ -25264,7 +25264,7 @@
 		}
 		o2 := v_1.AuxInt
 		p2 := v_1.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpConstBool)
@@ -25288,7 +25288,7 @@
 		}
 		o1 := v_1.AuxInt
 		p1 := v_1.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpConstBool)
@@ -25551,7 +25551,7 @@
 		}
 		o1 := v_0.Args[1]
 		p1 := v_0.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpNot)
@@ -25577,7 +25577,7 @@
 		}
 		o1 := v_1.Args[1]
 		p1 := v_1.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpNot)
@@ -29087,7 +29087,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpLsh16x64)
@@ -29328,7 +29328,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpLsh32x64)
@@ -29569,7 +29569,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpLsh64x64)
@@ -29810,7 +29810,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpLsh8x64)
@@ -30034,7 +30034,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c & 0xffff)) {
+		if !isPowerOfTwo(c & 0xffff) {
 			break
 		}
 		v.reset(OpAnd16)
@@ -30213,7 +30213,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c & 0xffffffff)) {
+		if !isPowerOfTwo(c & 0xffffffff) {
 			break
 		}
 		v.reset(OpAnd32)
@@ -30308,7 +30308,7 @@
 		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst64 || v_1.AuxInt != -1<<63 || !(isNonNegative(n)) {
+		if v_1.Op != OpConst64 || v_1.AuxInt != -1<<63 || !isNonNegative(n) {
 			break
 		}
 		v.reset(OpCopy)
@@ -30407,7 +30407,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpAnd64)
@@ -30603,7 +30603,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c & 0xff)) {
+		if !isPowerOfTwo(c & 0xff) {
 			break
 		}
 		v.reset(OpAnd8)
@@ -30662,7 +30662,7 @@
 		}
 		_ = mem.Args[1]
 		dst2 := mem.Args[0]
-		if !(isSamePtr(src, dst2)) {
+		if !isSamePtr(src, dst2) {
 			break
 		}
 		v.reset(OpZero)
@@ -30691,7 +30691,7 @@
 		}
 		_ = mem_0.Args[1]
 		dst0 := mem_0.Args[0]
-		if !(isSamePtr(src, dst0)) {
+		if !isSamePtr(src, dst0) {
 			break
 		}
 		v.reset(OpZero)
@@ -32097,7 +32097,7 @@
 		mem := v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
-		if !(isSamePtr(dst, src)) {
+		if !isSamePtr(dst, src) {
 			break
 		}
 		v.reset(OpCopy)
@@ -32210,7 +32210,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpLsh16x64)
@@ -32232,7 +32232,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpLsh16x64)
@@ -32533,7 +32533,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpLsh32x64)
@@ -32555,7 +32555,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpLsh32x64)
@@ -33104,7 +33104,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpLsh64x64)
@@ -33126,7 +33126,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpLsh64x64)
@@ -33675,7 +33675,7 @@
 			break
 		}
 		c := v_1.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpLsh8x64)
@@ -33697,7 +33697,7 @@
 			break
 		}
 		c := v_0.AuxInt
-		if !(isPowerOfTwo(c)) {
+		if !isPowerOfTwo(c) {
 			break
 		}
 		v.reset(OpLsh8x64)
@@ -34389,7 +34389,7 @@
 		}
 		y := v_0_1.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst16 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst16 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq16)
@@ -34425,7 +34425,7 @@
 		}
 		y := v_0_0.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst16 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst16 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq16)
@@ -34458,7 +34458,7 @@
 		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
-		if v_1_1.Op != OpConst16 || v_1_1.Type != t || v_1_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_1.Op != OpConst16 || v_1_1.Type != t || v_1_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq16)
@@ -34490,7 +34490,7 @@
 		}
 		x := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpConst16 || v_1_0.Type != t || v_1_0.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_0.Op != OpConst16 || v_1_0.Type != t || v_1_0.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq16)
@@ -34727,7 +34727,7 @@
 		}
 		y := v_0_1.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst32 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst32 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq32)
@@ -34763,7 +34763,7 @@
 		}
 		y := v_0_0.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst32 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst32 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq32)
@@ -34796,7 +34796,7 @@
 		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
-		if v_1_1.Op != OpConst32 || v_1_1.Type != t || v_1_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_1.Op != OpConst32 || v_1_1.Type != t || v_1_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq32)
@@ -34828,7 +34828,7 @@
 		}
 		x := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpConst32 || v_1_0.Type != t || v_1_0.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_0.Op != OpConst32 || v_1_0.Type != t || v_1_0.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq32)
@@ -35104,7 +35104,7 @@
 		}
 		y := v_0_1.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst64 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst64 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq64)
@@ -35140,7 +35140,7 @@
 		}
 		y := v_0_0.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst64 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst64 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq64)
@@ -35173,7 +35173,7 @@
 		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
-		if v_1_1.Op != OpConst64 || v_1_1.Type != t || v_1_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_1.Op != OpConst64 || v_1_1.Type != t || v_1_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq64)
@@ -35205,7 +35205,7 @@
 		}
 		x := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpConst64 || v_1_0.Type != t || v_1_0.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_0.Op != OpConst64 || v_1_0.Type != t || v_1_0.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq64)
@@ -35481,7 +35481,7 @@
 		}
 		y := v_0_1.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst8 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst8 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq8)
@@ -35517,7 +35517,7 @@
 		}
 		y := v_0_0.AuxInt
 		v_1 := v.Args[1]
-		if v_1.Op != OpConst8 || v_1.Type != t || v_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1.Op != OpConst8 || v_1.Type != t || v_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq8)
@@ -35550,7 +35550,7 @@
 		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
-		if v_1_1.Op != OpConst8 || v_1_1.Type != t || v_1_1.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_1.Op != OpConst8 || v_1_1.Type != t || v_1_1.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq8)
@@ -35582,7 +35582,7 @@
 		}
 		x := v_1.Args[1]
 		v_1_0 := v_1.Args[0]
-		if v_1_0.Op != OpConst8 || v_1_0.Type != t || v_1_0.AuxInt != y || !(isPowerOfTwo(y)) {
+		if v_1_0.Op != OpConst8 || v_1_0.Type != t || v_1_0.AuxInt != y || !isPowerOfTwo(y) {
 			break
 		}
 		v.reset(OpEq8)
@@ -36060,7 +36060,7 @@
 		}
 		o1 := v_0.AuxInt
 		p1 := v_0.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpConstBool)
@@ -36079,7 +36079,7 @@
 		}
 		o1 := v_1.AuxInt
 		p1 := v_1.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpConstBool)
@@ -36103,7 +36103,7 @@
 		}
 		o2 := v_1.AuxInt
 		p2 := v_1.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpConstBool)
@@ -36127,7 +36127,7 @@
 		}
 		o1 := v_1.AuxInt
 		p1 := v_1.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpConstBool)
@@ -36388,7 +36388,7 @@
 		}
 		o1 := v_0.Args[1]
 		p1 := v_0.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpIsNonNil)
@@ -36410,7 +36410,7 @@
 		}
 		o1 := v_1.Args[1]
 		p1 := v_1.Args[0]
-		if !(isSamePtr(p1, p2)) {
+		if !isSamePtr(p1, p2) {
 			break
 		}
 		v.reset(OpIsNonNil)
@@ -39737,7 +39737,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpRsh16Ux64)
@@ -40010,7 +40010,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpRsh16x64)
@@ -40234,7 +40234,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpRsh32Ux64)
@@ -40531,7 +40531,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpRsh32x64)
@@ -40779,7 +40779,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpRsh64Ux64)
@@ -41100,7 +41100,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpRsh64x64)
@@ -41372,7 +41372,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpRsh8Ux64)
@@ -41620,7 +41620,7 @@
 			break
 		}
 		d := v_1.AuxInt
-		if !(!uaddOvf(c, d)) {
+		if !!uaddOvf(c, d) {
 			break
 		}
 		v.reset(OpRsh8x64)
@@ -42266,7 +42266,7 @@
 	for {
 		sym := v.Aux
 		x := v.Args[0]
-		if !(needRaceCleanup(sym, v)) {
+		if !needRaceCleanup(sym, v) {
 			break
 		}
 		v.reset(OpCopy)
@@ -42732,7 +42732,7 @@
 		}
 		_ = v_1.Args[1]
 		src := v_1.Args[0]
-		if mem != v_1.Args[1] || !(!fe.CanSSA(t.(*types.Type))) {
+		if mem != v_1.Args[1] || !!fe.CanSSA(t.(*types.Type)) {
 			break
 		}
 		v.reset(OpMove)
@@ -42761,7 +42761,7 @@
 			break
 		}
 		x := v_2.Aux
-		if mem != v_2.Args[0] || !(!fe.CanSSA(t.(*types.Type))) {
+		if mem != v_2.Args[0] || !!fe.CanSSA(t.(*types.Type)) {
 			break
 		}
 		v.reset(OpMove)
@@ -43488,7 +43488,7 @@
 		t := x.Type
 		mem := x.Args[1]
 		ptr := x.Args[0]
-		if !(!fe.CanSSA(t)) {
+		if !!fe.CanSSA(t) {
 			break
 		}
 		b = x.Block
